[{"path":[]},{"path":"https://docs.ropensci.org/tinkr/CONTRIBUTING.html","id":"fixing-typos","dir":"","previous_headings":"","what":"Fixing typos","title":"CONTRIBUTING","text":"Small typos grammatical errors documentation may edited directly using GitHub web interface, long changes made source file. YES: edit roxygen comment .R file R/. : edit .Rd file man/.","code":""},{"path":"https://docs.ropensci.org/tinkr/CONTRIBUTING.html","id":"prerequisites","dir":"","previous_headings":"","what":"Prerequisites","title":"CONTRIBUTING","text":"make substantial pull request, always file issue make sure someone team agrees ’s problem. ’ve found bug, create associated issue illustrate bug minimal reprex.","code":""},{"path":"https://docs.ropensci.org/tinkr/CONTRIBUTING.html","id":"pull-request-process","dir":"","previous_headings":"","what":"Pull request process","title":"CONTRIBUTING","text":"recommend create Git branch pull request (PR). Look Travis AppVeyor build status making changes. README contain badges continuous integration services used package. recommend tidyverse style guide. can use styler package apply styles, please don’t restyle code nothing PR. use roxygen2. use testthat. Contributions test cases included easier accept. user-facing changes, add bullet top NEWS.md current development version header describing changes made followed GitHub username, links relevant issue(s)/PR(s).","code":""},{"path":"https://docs.ropensci.org/tinkr/CONTRIBUTING.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"CONTRIBUTING","text":"Please note tinkr project released Contributor Code Conduct. contributing project agree abide terms.","code":""},{"path":"https://docs.ropensci.org/tinkr/CONTRIBUTING.html","id":"see-ropensci-contributing-guide","dir":"","previous_headings":"","what":"See rOpenSci contributing guide","title":"CONTRIBUTING","text":"details.","code":""},{"path":"https://docs.ropensci.org/tinkr/CONTRIBUTING.html","id":"discussion-forum","dir":"","previous_headings":"","what":"Discussion forum","title":"CONTRIBUTING","text":"Check discussion forum think issue requires longer form discussion.","code":""},{"path":"https://docs.ropensci.org/tinkr/CONTRIBUTING.html","id":"prefer-to-email","dir":"","previous_headings":"","what":"Prefer to Email?","title":"CONTRIBUTING","text":"Email person listed maintainer DESCRIPTION file repo. Though note private discussions email don’t help others - course email totally warranted ’s sensitive problem kind.","code":""},{"path":"https://docs.ropensci.org/tinkr/CONTRIBUTING.html","id":"thanks-for-contributing","dir":"","previous_headings":"","what":"Thanks for contributing!","title":"CONTRIBUTING","text":"contributing guide adapted tidyverse contributing guide available https://raw.githubusercontent.com/r-lib/usethis/master/inst/templates/tidy-contributing.md","code":""},{"path":"https://docs.ropensci.org/tinkr/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://docs.ropensci.org/tinkr/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/tinkr/LICENSE.html","id":"0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://docs.ropensci.org/tinkr/LICENSE.html","id":"1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://docs.ropensci.org/tinkr/LICENSE.html","id":"2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://docs.ropensci.org/tinkr/LICENSE.html","id":"3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://docs.ropensci.org/tinkr/LICENSE.html","id":"4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://docs.ropensci.org/tinkr/LICENSE.html","id":"5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://docs.ropensci.org/tinkr/LICENSE.html","id":"6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://docs.ropensci.org/tinkr/LICENSE.html","id":"7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://docs.ropensci.org/tinkr/LICENSE.html","id":"8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://docs.ropensci.org/tinkr/LICENSE.html","id":"9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://docs.ropensci.org/tinkr/LICENSE.html","id":"10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://docs.ropensci.org/tinkr/LICENSE.html","id":"11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://docs.ropensci.org/tinkr/LICENSE.html","id":"12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://docs.ropensci.org/tinkr/LICENSE.html","id":"13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://docs.ropensci.org/tinkr/LICENSE.html","id":"14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://docs.ropensci.org/tinkr/LICENSE.html","id":"15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://docs.ropensci.org/tinkr/LICENSE.html","id":"16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://docs.ropensci.org/tinkr/LICENSE.html","id":"17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://docs.ropensci.org/tinkr/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) 2018 Maëlle Salmon  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. tinkr Copyright (C) 2018 Maëlle Salmon This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://docs.ropensci.org/tinkr/articles/tinkr.html","id":"use-cases","dir":"Articles","previous_headings":"","what":"Use Cases","title":"Introduction to the tinkr package","text":"Possible applications R scripts using tinkr, XPath via xml2 : change levels headers, cf roweb2_headers.R script pull request #279 roweb2; change chunk labels options; extract runnable code (including inline code); insert arbitrary Markdown elements; modify link URLs; idea, please report use cases!","code":""},{"path":"https://docs.ropensci.org/tinkr/articles/tinkr.html","id":"workflow","dir":"Articles","previous_headings":"","what":"Workflow","title":"Introduction to the tinkr package","text":"body (R) Markdown file cast XML, using Commonmark specification via commonmark package. YAML metadata edited using yaml package, goal package. created R6 class object called yarn store representation YAML XML data, accessible $body $yaml elements. addition, namespace prefix set “md” $ns element. can perform XPath queries using $body $ns elements:","code":"library(\"tinkr\") library(\"xml2\") path <- system.file(\"extdata\", \"example1.md\", package = \"tinkr\") head(readLines(path)) #> [1] \"---\"                                                                                #> [2] \"title: \\\"What have these birds been studied for? Querying science outputs with R\\\"\" #> [3] \"slug: birds-science\"                                                                #> [4] \"authors:\"                                                                           #> [5] \"  - name: Maëlle Salmon\"                                                            #> [6] \"    url: https://masalmon.eu/\" ex1 <- tinkr::yarn$new(path) # find all ropensci.org blog links xml_find_all(   x = ex1$body,    xpath = \".//md:link[contains(@destination,'ropensci.org/blog')]\",    ns = ex1$ns ) #> {xml_nodeset (7)} #> [1] <link destination=\"https://ropensci.org/blog/2018/08/21/birds-radolfzell/ ... #> [2] <link destination=\"https://ropensci.org/blog/2018/09/04/birds-taxo-traits ... #> [3] <link destination=\"https://ropensci.org/blog/2018/08/21/birds-radolfzell/ ... #> [4] <link destination=\"https://ropensci.org/blog/2018/08/14/where-to-bird/\" t ... #> [5] <link destination=\"https://ropensci.org/blog/2018/08/21/birds-radolfzell/ ... #> [6] <link destination=\"https://ropensci.org/blog/2018/08/28/birds-ocr/\" title ... #> [7] <link destination=\"https://ropensci.org/blog/2018/09/04/birds-taxo-traits ..."},{"path":[]},{"path":"https://docs.ropensci.org/tinkr/articles/tinkr.html","id":"markdown","dir":"Articles","previous_headings":"Examples","what":"Markdown","title":"Introduction to the tinkr package","text":"basic example. read “example1.md”, change headers 3 headers 1, save back md. xml2 objects passed reference, manipulating require reassignment.","code":"library(\"magrittr\") library(\"tinkr\") # From Markdown to XML path <- system.file(\"extdata\", \"example1.md\", package = \"tinkr\") # Level 3 header example: cat(tail(readLines(path, 40)), sep = \"\\n\") #> ### Getting a list of 50 species from occurrence data #>  #> For more details about the following code, refer to the [previous post #> of the series](https://ropensci.org/blog/2018/08/21/birds-radolfzell/). #> The single difference is our adding a step to keep only data for the #> most recent years. ex1  <- tinkr::yarn$new(path) # transform level 3 headers into level 1 headers ex1$body %>%   xml2::xml_find_all(xpath = \".//md:heading[@level='3']\", ex1$ns) %>%    xml2::xml_set_attr(\"level\", 1)  # Back to Markdown tmp <- tempfile(fileext = \"md\") ex1$write(tmp) # Level three headers are now Level one: cat(tail(readLines(tmp, 40)), sep = \"\\n\") #> # Getting a list of 50 species from occurrence data #>  #> For more details about the following code, refer to the [previous post #> of the series](https://ropensci.org/blog/2018/08/21/birds-radolfzell/). #> The single difference is our adding a step to keep only data for the #> most recent years. unlink(tmp)"},{"path":"https://docs.ropensci.org/tinkr/articles/tinkr.html","id":"r-markdown","dir":"Articles","previous_headings":"Examples","what":"R Markdown","title":"Introduction to the tinkr package","text":"R Markdown files, ease editing chunk label options, to_xml munges chunk info different attributes. E.g. see code_blocks can language, name, echo attributes. Note features tinkr work Markdown R Markdown.","code":"path <- system.file(\"extdata\", \"example2.Rmd\", package = \"tinkr\") rmd <- tinkr::yarn$new(path) rmd$body #> {xml_document} #> <document xmlns=\"http://commonmark.org/xml/1.0\"> #>  [1] <code_block xml:space=\"preserve\" language=\"r\" name=\"setup\" include=\"FALS ... #>  [2] <heading level=\"2\">\\n  <text xml:space=\"preserve\">R Markdown<\/text>\\n<\/h ... #>  [3] <paragraph>\\n  <text xml:space=\"preserve\">This is an <\/text>\\n  <striket ... #>  [4] <paragraph>\\n  <text xml:space=\"preserve\">When you click the <\/text>\\n   ... #>  [5] <code_block xml:space=\"preserve\" language=\"r\" name=\"\" eval=\"TRUE\" echo=\" ... #>  [6] <heading level=\"2\">\\n  <text xml:space=\"preserve\">Including Plots<\/text> ... #>  [7] <paragraph>\\n  <text xml:space=\"preserve\">You can also embed plots, for  ... #>  [8] <code_block xml:space=\"preserve\" language=\"python\" name=\"\" fig.cap=\"&quo ... #>  [9] <code_block xml:space=\"preserve\" language=\"python\" name=\"\">plot(pressure ... #> [10] <paragraph>\\n  <text xml:space=\"preserve\">Non-RMarkdown blocks are also  ... #> [11] <code_block info=\"bash\" xml:space=\"preserve\" name=\"\">echo \"this is an un ... #> [12] <code_block xml:space=\"preserve\" name=\"\">This is an ambiguous code block ... #> [13] <paragraph>\\n  <text xml:space=\"preserve\">Note that the <\/text>\\n  <code ... #> [14] <table>\\n  <table_header>\\n    <table_cell align=\"left\">\\n      <text xm ... #> [15] <paragraph>\\n  <text xml:space=\"preserve\">blabla<\/text>\\n<\/paragraph>"},{"path":"https://docs.ropensci.org/tinkr/articles/tinkr.html","id":"inserting-new-markdown-elements","dir":"Articles","previous_headings":"Examples","what":"Inserting new Markdown elements","title":"Introduction to the tinkr package","text":"Inserting new nodes AST surprisingly difficult default namespace, provided method yarn object take plain Markdown translate XML nodes insert document . example, can add new code block:","code":"path <- system.file(\"extdata\", \"example2.Rmd\", package = \"tinkr\") rmd <- tinkr::yarn$new(path) xml2::xml_find_first(rmd$body, \".//md:code_block\", rmd$ns) #> {xml_node} #> <code_block space=\"preserve\" language=\"r\" name=\"setup\" include=\"FALSE\" eval=\"TRUE\"> new_code <- c(   \"```{r xml-block, message = TRUE}\",   \"message(\\\"this is a new chunk from {tinkr}\\\")\",   \"```\") new_table <- data.frame(   package = c(\"xml2\", \"xslt\", \"commonmark\", \"tinkr\"),   cool = TRUE ) # Add chunk into document after the first chunk rmd$add_md(new_code, where = 1L) # Add a table after the second chunk: rmd$add_md(knitr::kable(new_table), where = 2L) # show the first 21 lines of modified document rmd$head(21) #> --- #> title: \"Untitled\" #> author: \"M. Salmon\" #> date: \"September 6, 2018\" #> output: html_document #> --- #>  #> ```{r setup, include=FALSE, eval=TRUE} #> knitr::opts_chunk$set(echo = TRUE) #> ``` #>  #> ```{r xml-block, message=TRUE} #> message(\"this is a new chunk from {tinkr}\") #> ``` #>  #> | package                    | cool                |  #> | :------------------------- | :------------------ | #> | xml2                       | TRUE                |  #> | xslt                       | TRUE                |  #> | commonmark                 | TRUE                |  #> | tinkr                      | TRUE                |"},{"path":"https://docs.ropensci.org/tinkr/articles/tinkr.html","id":"background-pre-requisites","dir":"Articles","previous_headings":"","what":"Background / pre-requisites","title":"Introduction to the tinkr package","text":"closely following one examples provided, background knowledge need using tinkr? XPath, language querying XML & HTML, exists, basics. Basics xml2 works: find, replace, remove nodes etc. use R6 classes… although reading examples help get gist. happy default stylesheet, understanding XSLT help create . Refer good resource XSLT XML transformations.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/tinkr/articles/tinkr.html","id":"general-principles-and-solution","dir":"Articles","previous_headings":"Loss of Markdown style","what":"General principles and solution","title":"Introduction to the tinkr package","text":"(R)md XML (R)md loop tinkr based slightly lossy Markdown syntax redundancy, loop (R)md R(md) via to_xml to_md bit lossy. instance lists can created either “+”, “-” “*“. using tinkr, (R)md editing use”-” lists. Links built like [word][smallref] bottom anchor [smallref]: URL anchor moved bottom document. Characters escaped (e.g. “[” link). GitHub tickboxes preserved (yarn objects) Block quotes lines get “>” whereas input first “>” beginning first line. tables see next subsection. losses make (R)md different, git diff bit harder parse, change documents (R)md rendered . , report bug issue tracker! solution loose Markdown style, e.g. preferring “*” “-” lists tweak XSL stylesheet provide filepath stylesheet_path argument to_md.","code":""},{"path":"https://docs.ropensci.org/tinkr/articles/tinkr.html","id":"the-special-case-of-tables","dir":"Articles","previous_headings":"Loss of Markdown style","what":"The special case of tables","title":"Introduction to the tinkr package","text":"Tables supposed remain/become pretty full loop to_xml + to_md. notice something amiss, e.g. much space compared expecting, please open issue.","code":""},{"path":"https://docs.ropensci.org/tinkr/articles/tinkr.html","id":"latex-equations","dir":"Articles","previous_headings":"Loss of Markdown style","what":"LaTeX equations","title":"Introduction to the tinkr package","text":"Markdown parsers like pandoc know LaTeX , commonmark , means LaTeX equations end extra markup due commonmark’s desire escape characters. However, LaTeX equations use either $ $$ delimit , can protect formatting changes $protect_math() method (users yarn object) protect_math() function (using output to_xml()). demonstration using yarn object: Note, however, caveats : dollar notation inline math must adjacent text. E.G. $\\alpha$ valid, $ \\alpha$ $\\alpha $ valid. currently support bracket notation use postfix dollar sign prose (e.g. BASIC commands Burroughs-Wheeler Transformation demonstration), must sure either use punctuation trailing dollar sign format text code. (.e. `INKEY$` good, INKEY$ good interpreted LaTeX code, throwing error:","code":"path <- system.file(\"extdata\", \"math-example.md\", package = \"tinkr\") math <- tinkr::yarn$new(path) math$tail() # malformed #>  #> $$ #> Q\\_{N(norm)}=\\\\frac{C\\_N +C\\_{N-1}}2\\\\times #> \\\\frac{\\\\sum *{i=N-n}^{N}Q\\_i} {\\\\sum*{j=N-n}^{N}{(\\\\frac{C\\_j+C\\_{j-1}}2)}} #> $$ math$protect_math()$tail() # success! #>  #> $$ #> Q_{N(norm)}=\\frac{C_N +C_{N-1}}2\\times #> \\frac{\\sum _{i=N-n}^{N}Q_i} {\\sum_{j=N-n}^{N}{(\\frac{C_j+C_{j-1}}2)}} #> $$ path <- system.file(\"extdata\", \"basic-math.md\", package = \"tinkr\") math <- tinkr::yarn$new(path) math$head(15) # malformed #> --- #> title: basic math #> --- #>  #> BASIC programming can make things weird: #>  #> - Give you $2 to tell me what INKEY$ means. #> - Give you $2 to *show* me what INKEY$ means. #> - Give you $2 to *show* me what `INKEY$` means. #>  #> Postfix dollars mixed with prefixed dollars can make things weird: #>  #> - We write $2 but say 2$ verbally. #> - We write $2 but *say* 2$ verbally. math$protect_math() #error #> Error: Inline math delimiters are not balanced. #>  #> HINT: If you are writing BASIC code, make sure you wrap variable #>       names and code in backtics like so: `INKEY$`. #>  #> Below are the pairs that were found: #>            start...end #>            -----...--- #>  Give you $2 to ... me what INKEY$ means. #>  Give you $2 to ... 2$ verbally. #> We write $2 but ..."},{"path":"https://docs.ropensci.org/tinkr/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Maëlle Salmon. Author. Zhian N. Kamvar. Author, maintainer. Jeroen Ooms. Author. Nick Wellnhofer. Copyright holder.            Nick Wellnhofer wrote XSLT stylesheet. . Funder.            https://ropensci.org/ Peter Daengeli. Contributor.","code":""},{"path":"https://docs.ropensci.org/tinkr/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Salmon M, Kamvar Z, Ooms J (2024). tinkr: Cast '(R)Markdown' Files 'XML' Back . R package version 0.2.0, https://github.com/ropensci/tinkr, https://docs.ropensci.org/tinkr/.","code":"@Manual{,   title = {tinkr: Cast '(R)Markdown' Files to 'XML' and Back Again},   author = {Maëlle Salmon and Zhian N. Kamvar and Jeroen Ooms},   year = {2024},   note = {R package version 0.2.0, https://github.com/ropensci/tinkr},   url = {https://docs.ropensci.org/tinkr/}, }"},{"path":"https://docs.ropensci.org/tinkr/index.html","id":"tinkr","dir":"","previous_headings":"","what":"Cast (R)Markdown Files to XML and Back Again","title":"Cast (R)Markdown Files to XML and Back Again","text":"goal tinkr convert (R)Markdown files XML back allow editing xml2 (XPath!) instead numerous complicated regular expressions. words mean nothing , see list resources get started.","code":""},{"path":"https://docs.ropensci.org/tinkr/index.html","id":"use-cases","dir":"","previous_headings":"","what":"Use Cases","title":"Cast (R)Markdown Files to XML and Back Again","text":"Possible applications R scripts using tinkr, XPath via xml2 : change levels headers, cf roweb2_headers.R script pull request #279 roweb2; change chunk labels options; extract runnable code (including inline code); insert arbitrary Markdown elements; modify link URLs; idea, please report use cases!","code":""},{"path":"https://docs.ropensci.org/tinkr/index.html","id":"workflow","dir":"","previous_headings":"","what":"Workflow","title":"Cast (R)Markdown Files to XML and Back Again","text":"body (R) Markdown file cast XML, using Commonmark specification via commonmark package. YAML metadata edited using yaml package, goal package. created R6 class object called yarn store representation YAML XML data, accessible $body $yaml elements. addition, namespace prefix set “md” $ns element. can perform XPath queries using $body $ns elements:","code":"library(\"tinkr\") library(\"xml2\") path <- system.file(\"extdata\", \"example1.md\", package = \"tinkr\") head(readLines(path)) #| [1] \"---\"                                                                                #| [2] \"title: \\\"What have these birds been studied for? Querying science outputs with R\\\"\" #| [3] \"slug: birds-science\"                                                                #| [4] \"authors:\"                                                                           #| [5] \"  - name: Maëlle Salmon\"                                                            #| [6] \"    url: https://masalmon.eu/\" ex1 <- tinkr::yarn$new(path) # find all ropensci.org blog links xml_find_all(   x = ex1$body,    xpath = \".//md:link[contains(@destination,'ropensci.org/blog')]\",    ns = ex1$ns ) #| {xml_nodeset (7)} #| [1] <link destination=\"https://ropensci.org/blog/2018/08/21/birds-radolfzell/ ... #| [2] <link destination=\"https://ropensci.org/blog/2018/09/04/birds-taxo-traits ... #| [3] <link destination=\"https://ropensci.org/blog/2018/08/21/birds-radolfzell/ ... #| [4] <link destination=\"https://ropensci.org/blog/2018/08/14/where-to-bird/\" t ... #| [5] <link destination=\"https://ropensci.org/blog/2018/08/21/birds-radolfzell/ ... #| [6] <link destination=\"https://ropensci.org/blog/2018/08/28/birds-ocr/\" title ... #| [7] <link destination=\"https://ropensci.org/blog/2018/09/04/birds-taxo-traits ..."},{"path":"https://docs.ropensci.org/tinkr/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Cast (R)Markdown Files to XML and Back Again","text":"Wanna try package tell us doesn’t work yet?","code":"install.packages(\"tinkr\", repos = \"https://ropensci.r-universe.dev\")"},{"path":[]},{"path":"https://docs.ropensci.org/tinkr/index.html","id":"markdown","dir":"","previous_headings":"Examples","what":"Markdown","title":"Cast (R)Markdown Files to XML and Back Again","text":"basic example. read “example1.md”, change headers 3 headers 1, save back md. xml2 objects passed reference, manipulating require reassignment.","code":"library(\"magrittr\") library(\"tinkr\") # From Markdown to XML path <- system.file(\"extdata\", \"example1.md\", package = \"tinkr\") # Level 3 header example: cat(tail(readLines(path, 40)), sep = \"\\n\") #| ### Getting a list of 50 species from occurrence data #|  #| For more details about the following code, refer to the [previous post #| of the series](https://ropensci.org/blog/2018/08/21/birds-radolfzell/). #| The single difference is our adding a step to keep only data for the #| most recent years. ex1  <- tinkr::yarn$new(path) # transform level 3 headers into level 1 headers ex1$body %>%   xml2::xml_find_all(xpath = \".//md:heading[@level='3']\", ex1$ns) %>%    xml2::xml_set_attr(\"level\", 1)  # Back to Markdown tmp <- tempfile(fileext = \"md\") ex1$write(tmp) # Level three headers are now Level one: cat(tail(readLines(tmp, 40)), sep = \"\\n\") #| # Getting a list of 50 species from occurrence data #|  #| For more details about the following code, refer to the [previous post #| of the series](https://ropensci.org/blog/2018/08/21/birds-radolfzell/). #| The single difference is our adding a step to keep only data for the #| most recent years. unlink(tmp)"},{"path":"https://docs.ropensci.org/tinkr/index.html","id":"r-markdown","dir":"","previous_headings":"Examples","what":"R Markdown","title":"Cast (R)Markdown Files to XML and Back Again","text":"R Markdown files, ease editing chunk label options, to_xml munges chunk info different attributes. E.g. see code_blocks can language, name, echo attributes. Note features tinkr work Markdown R Markdown.","code":"path <- system.file(\"extdata\", \"example2.Rmd\", package = \"tinkr\") rmd <- tinkr::yarn$new(path) rmd$body #| {xml_document} #| <document xmlns=\"http://commonmark.org/xml/1.0\"> #|  [1] <code_block xml:space=\"preserve\" language=\"r\" name=\"setup\" include=\"FALS ... #|  [2] <heading level=\"2\">\\n  <text xml:space=\"preserve\">R Markdown<\/text>\\n<\/h ... #|  [3] <paragraph>\\n  <text xml:space=\"preserve\">This is an <\/text>\\n  <striket ... #|  [4] <paragraph>\\n  <text xml:space=\"preserve\">When you click the <\/text>\\n   ... #|  [5] <code_block xml:space=\"preserve\" language=\"r\" name=\"\" eval=\"TRUE\" echo=\" ... #|  [6] <heading level=\"2\">\\n  <text xml:space=\"preserve\">Including Plots<\/text> ... #|  [7] <paragraph>\\n  <text xml:space=\"preserve\">You can also embed plots, for  ... #|  [8] <code_block xml:space=\"preserve\" language=\"python\" name=\"\" fig.cap=\"&quo ... #|  [9] <code_block xml:space=\"preserve\" language=\"python\" name=\"\">plot(pressure ... #| [10] <paragraph>\\n  <text xml:space=\"preserve\">Non-RMarkdown blocks are also  ... #| [11] <code_block info=\"bash\" xml:space=\"preserve\" name=\"\">echo \"this is an un ... #| [12] <code_block xml:space=\"preserve\" name=\"\">This is an ambiguous code block ... #| [13] <paragraph>\\n  <text xml:space=\"preserve\">Note that the <\/text>\\n  <code ... #| [14] <table>\\n  <table_header>\\n    <table_cell align=\"left\">\\n      <text xm ... #| [15] <paragraph>\\n  <text xml:space=\"preserve\">blabla<\/text>\\n<\/paragraph>"},{"path":"https://docs.ropensci.org/tinkr/index.html","id":"inserting-new-markdown-elements","dir":"","previous_headings":"Examples","what":"Inserting new Markdown elements","title":"Cast (R)Markdown Files to XML and Back Again","text":"Inserting new nodes AST surprisingly difficult default namespace, provided method yarn object take plain Markdown translate XML nodes insert document . example, can add new code block:","code":"path <- system.file(\"extdata\", \"example2.Rmd\", package = \"tinkr\") rmd <- tinkr::yarn$new(path) xml2::xml_find_first(rmd$body, \".//md:code_block\", rmd$ns) #| {xml_node} #| <code_block space=\"preserve\" language=\"r\" name=\"setup\" include=\"FALSE\" eval=\"TRUE\"> new_code <- c(   \"```{r xml-block, message = TRUE}\",   \"message(\\\"this is a new chunk from {tinkr}\\\")\",   \"```\") new_table <- data.frame(   package = c(\"xml2\", \"xslt\", \"commonmark\", \"tinkr\"),   cool = TRUE ) # Add chunk into document after the first chunk rmd$add_md(new_code, where = 1L) # Add a table after the second chunk: rmd$add_md(knitr::kable(new_table), where = 2L) # show the first 21 lines of modified document rmd$head(21) #| --- #| title: \"Untitled\" #| author: \"M. Salmon\" #| date: \"September 6, 2018\" #| output: html_document #| --- #|  #| ```{r setup, include=FALSE, eval=TRUE} #| knitr::opts_chunk$set(echo = TRUE) #| ``` #|  #| ```{r xml-block, message=TRUE} #| message(\"this is a new chunk from {tinkr}\") #| ``` #|  #| | package                    | cool                |  #| | :------------------------- | :------------------ | #| | xml2                       | TRUE                |  #| | xslt                       | TRUE                |  #| | commonmark                 | TRUE                |  #| | tinkr                      | TRUE                |"},{"path":"https://docs.ropensci.org/tinkr/index.html","id":"background--pre-requisites","dir":"","previous_headings":"","what":"Background / pre-requisites","title":"Cast (R)Markdown Files to XML and Back Again","text":"closely following one examples provided, background knowledge need using tinkr? XPath, language querying XML & HTML, exists, basics. Basics xml2 works: find, replace, remove nodes etc. use R6 classes… although reading examples help get gist. happy default stylesheet, understanding XSLT help create . Refer good resource XSLT XML transformations.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/tinkr/index.html","id":"general-principles-and-solution","dir":"","previous_headings":"Loss of Markdown style","what":"General principles and solution","title":"Cast (R)Markdown Files to XML and Back Again","text":"(R)md XML (R)md loop tinkr based slightly lossy Markdown syntax redundancy, loop (R)md R(md) via to_xml to_md bit lossy. instance lists can created either “+”, “-” “*“. using tinkr, (R)md editing use”-” lists. Links built like [word][smallref] bottom anchor [smallref]: URL anchor moved bottom document. Characters escaped (e.g. “[” link). GitHub tickboxes preserved (yarn objects) Block quotes lines get “>” whereas input first “>” beginning first line. tables see next subsection. losses make (R)md different, git diff bit harder parse, change documents (R)md rendered . , report bug issue tracker! solution loose Markdown style, e.g. preferring “*” “-” lists tweak XSL stylesheet provide filepath stylesheet_path argument to_md.","code":""},{"path":"https://docs.ropensci.org/tinkr/index.html","id":"the-special-case-of-tables","dir":"","previous_headings":"Loss of Markdown style","what":"The special case of tables","title":"Cast (R)Markdown Files to XML and Back Again","text":"Tables supposed remain/become pretty full loop to_xml + to_md. notice something amiss, e.g. much space compared expecting, please open issue.","code":""},{"path":"https://docs.ropensci.org/tinkr/index.html","id":"latex-equations","dir":"","previous_headings":"Loss of Markdown style","what":"LaTeX equations","title":"Cast (R)Markdown Files to XML and Back Again","text":"Markdown parsers like pandoc know LaTeX , commonmark , means LaTeX equations end extra markup due commonmark’s desire escape characters. However, LaTeX equations use either $ $$ delimit , can protect formatting changes $protect_math() method (users yarn object) protect_math() function (using output to_xml()). demonstration using yarn object: Note, however, caveats : dollar notation inline math must adjacent text. E.G. $\\alpha$ valid, $ \\alpha$ $\\alpha $ valid. currently support bracket notation use postfix dollar sign prose (e.g. BASIC commands Burroughs-Wheeler Transformation demonstration), must sure either use punctuation trailing dollar sign format text code. (.e. `INKEY$` good, INKEY$ good interpreted LaTeX code, throwing error: ::: {.cell} :::","code":"path <- system.file(\"extdata\", \"math-example.md\", package = \"tinkr\") math <- tinkr::yarn$new(path) math$tail() # malformed #|  #| $$ #| Q\\_{N(norm)}=\\\\frac{C\\_N +C\\_{N-1}}2\\\\times #| \\\\frac{\\\\sum *{i=N-n}^{N}Q\\_i} {\\\\sum*{j=N-n}^{N}{(\\\\frac{C\\_j+C\\_{j-1}}2)}} #| $$ math$protect_math()$tail() # success! #|  #| $$ #| Q_{N(norm)}=\\frac{C_N +C_{N-1}}2\\times #| \\frac{\\sum _{i=N-n}^{N}Q_i} {\\sum_{j=N-n}^{N}{(\\frac{C_j+C_{j-1}}2)}} #| $$ path <- system.file(\"extdata\", \"basic-math.md\", package = \"tinkr\") math <- tinkr::yarn$new(path) math$head(15) # malformed #| --- #| title: basic math #| --- #|  #| BASIC programming can make things weird: #|  #| - Give you $2 to tell me what INKEY$ means. #| - Give you $2 to *show* me what INKEY$ means. #| - Give you $2 to *show* me what `INKEY$` means. #|  #| Postfix dollars mixed with prefixed dollars can make things weird: #|  #| - We write $2 but say 2$ verbally. #| - We write $2 but *say* 2$ verbally. math$protect_math() #error #| Error: Inline math delimiters are not balanced. #|  #| HINT: If you are writing BASIC code, make sure you wrap variable #|       names and code in backtics like so: `INKEY$`.  #|  #| Below are the pairs that were found: #|            start...end #|            -----...--- #|  Give you $2 to ... me what INKEY$ means. #|  Give you $2 to ... 2$ verbally. #| We write $2 but ..."},{"path":"https://docs.ropensci.org/tinkr/index.html","id":"meta","dir":"","previous_headings":"","what":"Meta","title":"Cast (R)Markdown Files to XML and Back Again","text":"Please note ‘tinkr’ project released Contributor Code Conduct. contributing project, agree abide terms.","code":""},{"path":[]},{"path":[]},{"path":[]},{"path":"https://docs.ropensci.org/tinkr/reference/add_md.html","id":null,"dir":"Reference","previous_headings":"","what":"Add markdown content to an XML object — add_md","title":"Add markdown content to an XML object — add_md","text":"Add markdown content XML object","code":""},{"path":"https://docs.ropensci.org/tinkr/reference/add_md.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add markdown content to an XML object — add_md","text":"","code":"add_md(body, md, where = 0L)"},{"path":"https://docs.ropensci.org/tinkr/reference/add_md.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add markdown content to an XML object — add_md","text":"body XML object generated via tinkr md string new markdown insert position markdown document insert new markdown","code":""},{"path":"https://docs.ropensci.org/tinkr/reference/add_md.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add markdown content to an XML object — add_md","text":"copy XML object markdown inserted.","code":""},{"path":"https://docs.ropensci.org/tinkr/reference/find_between.html","id":null,"dir":"Reference","previous_headings":"","what":"Find between a pattern — find_between","title":"Find between a pattern — find_between","text":"Helper function find nodes standard pattern. useful want find unnested pandoc tags.","code":""},{"path":"https://docs.ropensci.org/tinkr/reference/find_between.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find between a pattern — find_between","text":"","code":"find_between(   body,   ns,   pattern = \"md:paragraph[md:text[starts-with(text(), ':::')]]\",   include = FALSE )"},{"path":"https://docs.ropensci.org/tinkr/reference/find_between.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find between a pattern — find_between","text":"body XML document ns namespace document pattern XPath expression defines characteristics nodes want extract everything. include TRUE, tags matching pattern included output, defaults FALSE, gives nodes pattern.","code":""},{"path":"https://docs.ropensci.org/tinkr/reference/find_between.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find between a pattern — find_between","text":"nodeset","code":""},{"path":"https://docs.ropensci.org/tinkr/reference/find_between.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find between a pattern — find_between","text":"","code":"md <- glue::glue(\"  h1  ====   ::: section   h2  ----   section *text* with [a link](https://ropensci.org/)    ::: \") x <- xml2::read_xml(commonmark::markdown_xml(md)) ns <- xml2::xml_ns_rename(xml2::xml_ns(x), d1 = \"md\") res <- find_between(x, ns) res #> {xml_nodeset (2)} #> [1] <heading level=\"2\">\\n  <text xml:space=\"preserve\">h2<\/text>\\n<\/heading> #> [2] <paragraph>\\n  <text xml:space=\"preserve\">section <\/text>\\n  <emph>\\n     ... xml2::xml_text(res) #> [1] \"h2\"                       \"section text with a link\" xml2::xml_find_all(res, \".//descendant-or-self::md:*\", ns = ns) #> {xml_nodeset (9)} #> [1] <heading level=\"2\">\\n  <text xml:space=\"preserve\">h2<\/text>\\n<\/heading> #> [2] <text xml:space=\"preserve\">h2<\/text> #> [3] <paragraph>\\n  <text xml:space=\"preserve\">section <\/text>\\n  <emph>\\n     ... #> [4] <text xml:space=\"preserve\">section <\/text> #> [5] <emph>\\n  <text xml:space=\"preserve\">text<\/text>\\n<\/emph> #> [6] <text xml:space=\"preserve\">text<\/text> #> [7] <text xml:space=\"preserve\"> with <\/text> #> [8] <link destination=\"https://ropensci.org/\" title=\"\">\\n  <text xml:space=\"p ... #> [9] <text xml:space=\"preserve\">a link<\/text>"},{"path":"https://docs.ropensci.org/tinkr/reference/md_ns.html","id":null,"dir":"Reference","previous_headings":"","what":"Aliased namespace prefix for commonmark — md_ns","title":"Aliased namespace prefix for commonmark — md_ns","text":"commonmark package used translate markdown XML, assign namespace prefix, means xml2 auto-assign default prefix d1.","code":""},{"path":"https://docs.ropensci.org/tinkr/reference/md_ns.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Aliased namespace prefix for commonmark — md_ns","text":"","code":"md_ns()"},{"path":"https://docs.ropensci.org/tinkr/reference/md_ns.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Aliased namespace prefix for commonmark — md_ns","text":"xml_namespace object (see xml2::xml_ns())","code":""},{"path":"https://docs.ropensci.org/tinkr/reference/md_ns.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Aliased namespace prefix for commonmark — md_ns","text":"function renames default prefix md, can use XPath queries slightly descriptive.","code":""},{"path":"https://docs.ropensci.org/tinkr/reference/md_ns.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Aliased namespace prefix for commonmark — md_ns","text":"","code":"tink <- tinkr::to_xml(system.file(\"extdata\", \"example1.md\", package = \"tinkr\")) # with default namespace xml2::xml_find_all(tink$body,    \".//d1:link[starts-with(@destination, 'https://ropensci')]\" ) #> {xml_nodeset (9)} #> [1] <link destination=\"https://ropensci.org/blog/2018/08/21/birds-radolfzell/ ... #> [2] <link destination=\"https://ropensci.org/blog/2018/09/04/birds-taxo-traits ... #> [3] <link destination=\"https://ropensci.org/blog/2018/08/21/birds-radolfzell/ ... #> [4] <link destination=\"https://ropensci.org/packages/\" title=\"\">\\n  <text xml ... #> [5] <link destination=\"https://ropensci.org/packages/\" title=\"\">\\n  <text xml ... #> [6] <link destination=\"https://ropensci.org/blog/2018/08/14/where-to-bird/\" t ... #> [7] <link destination=\"https://ropensci.org/blog/2018/08/21/birds-radolfzell/ ... #> [8] <link destination=\"https://ropensci.org/blog/2018/08/28/birds-ocr/\" title ... #> [9] <link destination=\"https://ropensci.org/blog/2018/09/04/birds-taxo-traits ... # with tinkr namespace xml2::xml_find_all(tink$body,    \".//md:link[starts-with(@destination, 'https://ropensci')]\",   tinkr::md_ns() ) #> {xml_nodeset (9)} #> [1] <link destination=\"https://ropensci.org/blog/2018/08/21/birds-radolfzell/ ... #> [2] <link destination=\"https://ropensci.org/blog/2018/09/04/birds-taxo-traits ... #> [3] <link destination=\"https://ropensci.org/blog/2018/08/21/birds-radolfzell/ ... #> [4] <link destination=\"https://ropensci.org/packages/\" title=\"\">\\n  <text xml ... #> [5] <link destination=\"https://ropensci.org/packages/\" title=\"\">\\n  <text xml ... #> [6] <link destination=\"https://ropensci.org/blog/2018/08/14/where-to-bird/\" t ... #> [7] <link destination=\"https://ropensci.org/blog/2018/08/21/birds-radolfzell/ ... #> [8] <link destination=\"https://ropensci.org/blog/2018/08/28/birds-ocr/\" title ... #> [9] <link destination=\"https://ropensci.org/blog/2018/09/04/birds-taxo-traits ..."},{"path":"https://docs.ropensci.org/tinkr/reference/md_to_xml.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert markdown to XML — md_to_xml","title":"Convert markdown to XML — md_to_xml","text":"Convert markdown XML","code":""},{"path":"https://docs.ropensci.org/tinkr/reference/md_to_xml.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert markdown to XML — md_to_xml","text":"","code":"md_to_xml(md)"},{"path":"https://docs.ropensci.org/tinkr/reference/md_to_xml.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert markdown to XML — md_to_xml","text":"md character vector markdown text","code":""},{"path":"https://docs.ropensci.org/tinkr/reference/md_to_xml.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert markdown to XML — md_to_xml","text":"XML nodeset markdown text","code":""},{"path":"https://docs.ropensci.org/tinkr/reference/md_to_xml.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert markdown to XML — md_to_xml","text":"","code":"if (requireNamespace(\"withr\")) {  withr::with_namespace(\"tinkr\", { md_to_xml(c(   \"## This is a new section of markdown\",   \"\",   \"Each new element\",   \"Is converted to a new line of markdown text\",   \"\",   \"```{r code-example, echo = FALSE}\",   \"cat('code blocks work well here, too')\",   \"```\",   \"\",   \"Neat, right?\" )) })  } #> {xml_nodeset (4)} #> [1] <heading level=\"2\">\\n  <text xml:space=\"preserve\">This is a new section o ... #> [2] <paragraph>\\n  <text xml:space=\"preserve\">Each new element<\/text>\\n  <sof ... #> [3] <code_block xml:space=\"preserve\" language=\"r\" name=\"code-example\" echo=\"F ... #> [4] <paragraph>\\n  <text xml:space=\"preserve\">Neat, right?<\/text>\\n<\/paragraph>"},{"path":"https://docs.ropensci.org/tinkr/reference/protect_curly.html","id":null,"dir":"Reference","previous_headings":"","what":"Protect curly elements for further processing — protect_curly","title":"Protect curly elements for further processing — protect_curly","text":"Protect curly elements processing","code":""},{"path":"https://docs.ropensci.org/tinkr/reference/protect_curly.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Protect curly elements for further processing — protect_curly","text":"","code":"protect_curly(body, ns = md_ns())"},{"path":"https://docs.ropensci.org/tinkr/reference/protect_curly.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Protect curly elements for further processing — protect_curly","text":"body XML object ns XML namespace object (defaults: md_ns()).","code":""},{"path":"https://docs.ropensci.org/tinkr/reference/protect_curly.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Protect curly elements for further processing — protect_curly","text":"copy modified XML object","code":""},{"path":"https://docs.ropensci.org/tinkr/reference/protect_curly.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Protect curly elements for further processing — protect_curly","text":"Commonmark render text {.unnumbered} (Pandoc/Quarto option) {#hello .greeting .message style=\"color: red;\"} (Markdown custom block) normal text might problematic trying extract real text XML. sending XML , say, translation API allows tags ignored, first transform text tags attribute curly curly tags, transform back text tags using to_md().","code":""},{"path":"https://docs.ropensci.org/tinkr/reference/protect_curly.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Protect curly elements for further processing — protect_curly","text":"function also method yarn object.","code":""},{"path":"https://docs.ropensci.org/tinkr/reference/protect_curly.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Protect curly elements for further processing — protect_curly","text":"","code":"m <- tinkr::to_xml(system.file(\"extdata\", \"basic-curly.md\", package = \"tinkr\")) xml2::xml_child(m$body) #> {xml_node} #> <heading level=\"1\"> #> [1] <text xml:space=\"preserve\">preface {#pre-face .unnumbered}<\/text> m$body <- protect_curly(m$body) xml2::xml_child(m$body) #> {xml_node} #> <heading level=\"1\"> #> [1] <text xml:space=\"preserve\">preface <\/text> #> [2] <text curly=\"true\">{#pre-face .unnumbered}<\/text> #> [3] <text/>"},{"path":"https://docs.ropensci.org/tinkr/reference/protect_inline_math.html","id":null,"dir":"Reference","previous_headings":"","what":"Find and protect all inline math elements — protect_inline_math","title":"Find and protect all inline math elements — protect_inline_math","text":"Find protect inline math elements","code":""},{"path":"https://docs.ropensci.org/tinkr/reference/protect_inline_math.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find and protect all inline math elements — protect_inline_math","text":"","code":"protect_inline_math(body, ns)"},{"path":"https://docs.ropensci.org/tinkr/reference/protect_inline_math.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find and protect all inline math elements — protect_inline_math","text":"body XML document ns XML namespace","code":""},{"path":"https://docs.ropensci.org/tinkr/reference/protect_inline_math.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find and protect all inline math elements — protect_inline_math","text":"modified copy original XML document","code":""},{"path":"https://docs.ropensci.org/tinkr/reference/protect_inline_math.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find and protect all inline math elements — protect_inline_math","text":"","code":"txt <- commonmark::markdown_xml(   \"This sentence contains $I_A$ $\\\\frac{\\\\pi}{2}$ inline $\\\\LaTeX$ math.\" ) txt <- xml2::read_xml(txt) cat(tinkr::to_md(list(body = txt, yaml = \"\")), sep = \"\\n\") #>  #> This sentence contains $I\\_A$ $\\\\frac{\\\\pi}{2}$ inline $\\\\LaTeX$ math. #>  ns  <- tinkr::md_ns() if (requireNamespace(\"withr\")) { protxt <- withr::with_namespace(\"tinkr\", protect_inline_math(txt, ns)) cat(tinkr::to_md(list(body = protxt, yaml = \"\")), sep = \"\\n\") } #>  #> This sentence contains $I_A$ $\\frac{\\pi}{2}$ inline $\\LaTeX$ math. #>"},{"path":"https://docs.ropensci.org/tinkr/reference/protect_math.html","id":null,"dir":"Reference","previous_headings":"","what":"Protect math elements from commonmark's character escape — protect_math","title":"Protect math elements from commonmark's character escape — protect_math","text":"Protect math elements commonmark's character escape","code":""},{"path":"https://docs.ropensci.org/tinkr/reference/protect_math.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Protect math elements from commonmark's character escape — protect_math","text":"","code":"protect_math(body, ns = md_ns())"},{"path":"https://docs.ropensci.org/tinkr/reference/protect_math.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Protect math elements from commonmark's character escape — protect_math","text":"body XML object ns XML namespace object (defaults: md_ns()).","code":""},{"path":"https://docs.ropensci.org/tinkr/reference/protect_math.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Protect math elements from commonmark's character escape — protect_math","text":"copy modified XML object","code":""},{"path":"https://docs.ropensci.org/tinkr/reference/protect_math.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Protect math elements from commonmark's character escape — protect_math","text":"Commonmark know LaTeX LaTeX equations normal text. means content surrounded underscores interpreted <emph> elements backslashes escaped default. function protects inline block math elements use $ $$ delimiters, respectively.","code":""},{"path":"https://docs.ropensci.org/tinkr/reference/protect_math.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Protect math elements from commonmark's character escape — protect_math","text":"function also method yarn object.","code":""},{"path":"https://docs.ropensci.org/tinkr/reference/protect_math.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Protect math elements from commonmark's character escape — protect_math","text":"","code":"m <- tinkr::to_xml(system.file(\"extdata\", \"math-example.md\", package = \"tinkr\")) txt <- textConnection(tinkr::to_md(m)) cat(tail(readLines(txt)), sep = \"\\n\") # broken math #>  #> $$ #> Q\\_{N(norm)}=\\\\frac{C\\_N +C\\_{N-1}}2\\\\times #> \\\\frac{\\\\sum *{i=N-n}^{N}Q\\_i} {\\\\sum*{j=N-n}^{N}{(\\\\frac{C\\_j+C\\_{j-1}}2)}} #> $$ #>  close(txt) m$body <- protect_math(m$body) txt <- textConnection(tinkr::to_md(m)) cat(tail(readLines(txt)), sep = \"\\n\") # fixed math #>  #> $$ #> Q_{N(norm)}=\\frac{C_N +C_{N-1}}2\\times #> \\frac{\\sum _{i=N-n}^{N}Q_i} {\\sum_{j=N-n}^{N}{(\\frac{C_j+C_{j-1}}2)}} #> $$ #>  close(txt)"},{"path":"https://docs.ropensci.org/tinkr/reference/protect_unescaped.html","id":null,"dir":"Reference","previous_headings":"","what":"Protect unescaped square brackets from being escaped — protect_unescaped","title":"Protect unescaped square brackets from being escaped — protect_unescaped","text":"Commonmark allows [unescaped] \\[escaped\\] square brackets, XML representation, makes note square brackets originally escaped thus escape output. function protects brackets unescaped source document escaped.","code":""},{"path":"https://docs.ropensci.org/tinkr/reference/protect_unescaped.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Protect unescaped square brackets from being escaped — protect_unescaped","text":"","code":"protect_unescaped(body, txt, ns = md_ns())"},{"path":"https://docs.ropensci.org/tinkr/reference/protect_unescaped.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Protect unescaped square brackets from being escaped — protect_unescaped","text":"body XML body txt text source file ns namespace resolves Markdown namespace (defaults md_ns())","code":""},{"path":"https://docs.ropensci.org/tinkr/reference/protect_unescaped.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Protect unescaped square brackets from being escaped — protect_unescaped","text":"internal function run default via to_xml() yarn$new(). uses original document, parsed text, find protect unescaped square brackets escaped output.","code":""},{"path":"https://docs.ropensci.org/tinkr/reference/protect_unescaped.html","id":"example-child-documents-and-footnotes","dir":"Reference","previous_headings":"","what":"Example: child documents and footnotes","title":"Protect unescaped square brackets from being escaped — protect_unescaped","text":"example, say two R Markdown documents, one references child, reference-style link: index.Rmd:   child.Rmd:   Without protection, roundtripped index.Rmd document look like :   function provides protection allows unescaped brackets remain unescaped roundtrip.","code":"## Title  Without protection reference style links (e.g. \\[text\\]\\[link\\]) like this [outside link][reflink] would be accidentally escaped. This is a footnote [^1].  [^1]: footnotes are not recognised by commonmark  ```{r, child=\"child.Rmd\"} ``` ... [reflink]: https://example.com ## Title  Without protection reference style links (e.g. \\[text\\]\\[link\\]) like this \\[outside link\\]\\[reflink\\] would be accidentally escaped. This is a footnote \\[^1\\]  \\[^1\\]: footnotes are not recognised by commonmark  ```{r, child=\"child.Rmd\"} ```"},{"path":"https://docs.ropensci.org/tinkr/reference/protect_unescaped.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Protect unescaped square brackets from being escaped — protect_unescaped","text":"body XML document sourcepos attributes nodes, achieved using sourcepos = TRUE to_xml() yarn.","code":""},{"path":"https://docs.ropensci.org/tinkr/reference/protect_unescaped.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Protect unescaped square brackets from being escaped — protect_unescaped","text":"","code":"f <- system.file(\"extdata\", \"link-test.md\", package = \"tinkr\") md <- yarn$new(f, sourcepos = TRUE, unescaped = FALSE) md$show() #> --- #> title: this tests links #> --- #>  #> ## These are some links that are valid in basic markdown #>  #> This is some text [that contains links][this fun link1] which #> [can be `inline`](https://example.com/2) or [can be spread across multiple lines #> because the link text is JUST TOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO #> LONG, y'all][link3]. #>  #> Mainly, we want to see if [link text #> by reference][link4] and if links [can be referenced multiple times][this fun link1] #>  #> This should also [include non-reference links](https://example.com/5) #>  #> If you \\[write\\]{.confession} \\[some link text\\]\\[link2\\], that will appear as [some link text][link2] #> but you can also [test][racehorse] [sub][sub-link1] [links][sub_link2] #>  #> [pizza \\& icecream][pizzaicecream] = fun #>  #> ```markdown #> you can write links like [a link](https://example.com/racehorse) or using #> [reference style][racehorce] #>  #> [racehorse]: https://example.com/racehorse/    #> ``` #>  #> ## This is some extended markdown content {#extended .callout} #>  #> This should also include references that use [standalone] links and #> footnotes should not be properly parsed and will be considered 'asis' nodes, #> at least that's what I *believe*\\[^footy\\]. Maybe this might not pan out \\[^but who #> knows? footnotes are **WEIRD**, man\\]. #>  #> <!-- links go here! --> #>  #> \\[^footy\\]: this is a footnote that #> should be preserved #>  #> [this fun link1]: https://example.com/1 #> [link3]: https://example.com/3 #> [link4]: https://example.com/4 #> [link2]: https://example.com/2 \"link with title!\" #> [racehorse]: https://example.com/racehorse/ #> [sub-link1]: https://example.com/racehorse/1/1 \"One One Won One\" #> [sub_link2]: https://example.com/racehorse/2/2/ \"Two Two Won One Two\" #> [pizzaicecream]: https://example.com/pizza&icecream #> [standalone]: https://example.com/standalone #>  #>  if (requireNamespace(\"withr\")) { lines <- readLines(f)[-length(md$yaml)] lnks <- withr::with_namespace(\"tinkr\",    protect_unescaped(body = md$body, txt = lines)) md$body <- lnks md$show() } #> --- #> title: this tests links #> --- #>  #> ## These are some links that are valid in basic markdown #>  #> This is some text [that contains links][this fun link1] which #> [can be `inline`](https://example.com/2) or [can be spread across multiple lines #> because the link text is JUST TOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO #> LONG, y'all][link3]. #>  #> Mainly, we want to see if [link text #> by reference][link4] and if links [can be referenced multiple times][this fun link1] #>  #> This should also [include non-reference links](https://example.com/5) #>  #> If you [write]{.confession} [some link text][link2], that will appear as [some link text][link2] #> but you can also [test][racehorse] [sub][sub-link1] [links][sub_link2] #>  #> [pizza \\& icecream][pizzaicecream] = fun #>  #> ```markdown #> you can write links like [a link](https://example.com/racehorse) or using #> [reference style][racehorce] #>  #> [racehorse]: https://example.com/racehorse/    #> ``` #>  #> ## This is some extended markdown content {#extended .callout} #>  #> This should also include references that use [standalone] links and #> footnotes should not be properly parsed and will be considered 'asis' nodes, #> at least that's what I *believe*[^footy]. Maybe this might not pan out [^but who #> knows? footnotes are **WEIRD**, man]. #>  #> <!-- links go here! --> #>  #> [^footy]: this is a footnote that #> should be preserved #>  #> [this fun link1]: https://example.com/1 #> [link3]: https://example.com/3 #> [link4]: https://example.com/4 #> [link2]: https://example.com/2 \"link with title!\" #> [racehorse]: https://example.com/racehorse/ #> [sub-link1]: https://example.com/racehorse/1/1 \"One One Won One\" #> [sub_link2]: https://example.com/racehorse/2/2/ \"Two Two Won One Two\" #> [pizzaicecream]: https://example.com/pizza&icecream #> [standalone]: https://example.com/standalone #>  #>"},{"path":"https://docs.ropensci.org/tinkr/reference/resolve_anchor_links.html","id":null,"dir":"Reference","previous_headings":"","what":"Resolve Reference-Style Links — resolve_anchor_links","title":"Resolve Reference-Style Links — resolve_anchor_links","text":"Reference style links images form markdown syntax reduces duplication makes markdown readable. come two parts: inline part uses two pairs square brackets second pair square brackets contains reference anchor part link. Example:   anchor part, can anywhere document, contains pair square brackets followed colon space link optionally link title. Example:   Commonmark treats reference-style links regular links, can pain converting large documents. function resolves links reading source document, finding reference-style links, adding back end document 'anchor' attribute appending reference link 'ref' attribute.","code":"[inline text describing link][link-reference] [link-reference]: https://docs.ropensci.org/tinkr/ 'documentation for tinkr'"},{"path":"https://docs.ropensci.org/tinkr/reference/resolve_anchor_links.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Resolve Reference-Style Links — resolve_anchor_links","text":"","code":"resolve_anchor_links(body, txt, ns = md_ns())"},{"path":"https://docs.ropensci.org/tinkr/reference/resolve_anchor_links.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Resolve Reference-Style Links — resolve_anchor_links","text":"body XML body txt text source file ns namespace resolves Markdown namespace (defaults md_ns())","code":""},{"path":[]},{"path":"https://docs.ropensci.org/tinkr/reference/resolve_anchor_links.html","id":"nomenclature","dir":"Reference","previous_headings":"","what":"Nomenclature","title":"Resolve Reference-Style Links — resolve_anchor_links","text":"reference-style link contains two parts, common names (markdown guide calls \"first part second part\"), documentation, call link pattern [link text][link-ref] \"inline reference-style link\" pattern [link-ref]: <URL> \"anchor references-style link\".","code":""},{"path":"https://docs.ropensci.org/tinkr/reference/resolve_anchor_links.html","id":"reference-style-links-in-commonmark-s-xml-representation","dir":"Reference","previous_headings":"","what":"Reference-style links in commonmark's XML representation","title":"Resolve Reference-Style Links — resolve_anchor_links","text":"link image XML represented node following attributes destination: URL link title: optional title link example, markdown link [link text](https://example.com \"example  link\") represented XML text inside link node:   However, reference-style links rendered equivalently:","code":"lnk <- \"[link text](https://example.com 'example link')\" xml <- xml2::read_xml(commonmark::markdown_xml(lnk)) cat(as.character(xml2::xml_find_first(xml, \".//d1:link\"))) #> <link destination=\"https://example.com\" title=\"example link\"> #>   <text xml:space=\"preserve\">link text<\/text> #> <\/link> lnk <- \" [link text][link-ref]  [link-ref]: https://example.com 'example link' \" xml <- xml2::read_xml(commonmark::markdown_xml(lnk)) cat(as.character(xml2::xml_find_first(xml, \".//d1:link\"))) #> <link destination=\"https://example.com\" title=\"example link\"> #>   <text xml:space=\"preserve\">link text<\/text> #> <\/link>"},{"path":"https://docs.ropensci.org/tinkr/reference/resolve_anchor_links.html","id":"xml-attributes-of-reference-style-links","dir":"Reference","previous_headings":"","what":"XML attributes of reference-style links","title":"Resolve Reference-Style Links — resolve_anchor_links","text":"preserve anchor reference-style links, search source document destination attribute proceded ]: , transform information new link node anchor attribute, add end document. node looks like :   , add anchor text node present document ref attribute:","code":"<link destination=\"https://example.com\" title=\"example link\" anchor=\"true\">   <text>link-ref<\/text> <\/link> <link destination=\"https://example.com\" title=\"example link\" rel=\"link-ref\">   <text xml:space=\"preserve\">link text<\/text> <\/link>"},{"path":"https://docs.ropensci.org/tinkr/reference/resolve_anchor_links.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Resolve Reference-Style Links — resolve_anchor_links","text":"function internally used function to_xml().","code":""},{"path":"https://docs.ropensci.org/tinkr/reference/resolve_anchor_links.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Resolve Reference-Style Links — resolve_anchor_links","text":"","code":"f <- system.file(\"extdata\", \"link-test.md\", package = \"tinkr\") md <- yarn$new(f, sourcepos = TRUE, anchor_links = FALSE) md$show() #> --- #> title: this tests links #> --- #>  #> ## These are some links that are valid in basic markdown #>  #> This is some text [that contains links](https://example.com/1) which #> [can be `inline`](https://example.com/2) or [can be spread across multiple lines #> because the link text is JUST TOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO #> LONG, y'all](https://example.com/3). #>  #> Mainly, we want to see if [link text #> by reference](https://example.com/4) and if links [can be referenced multiple times](https://example.com/1) #>  #> This should also [include non-reference links](https://example.com/5) #>  #> If you [write]{.confession} \\[some link text\\]\\[link2\\], that will appear as [some link text](https://example.com/2 \"link with title!\") #> but you can also [test](https://example.com/racehorse/) [sub](https://example.com/racehorse/1/1 \"One One Won One\") [links](https://example.com/racehorse/2/2/ \"Two Two Won One Two\") #>  #> [pizza \\& icecream](https://example.com/pizza&icecream) = fun #>  #> ```markdown #> you can write links like [a link](https://example.com/racehorse) or using #> [reference style][racehorce] #>  #> [racehorse]: https://example.com/racehorse/    #> ``` #>  #> ## This is some extended markdown content {#extended .callout} #>  #> This should also include references that use [standalone](https://example.com/standalone) links and #> footnotes should not be properly parsed and will be considered 'asis' nodes, #> at least that's what I *believe*[^footy]. Maybe this might not pan out [^but who #> knows? footnotes are **WEIRD**, man]. #>  #> <!-- links go here! --> #>  #> [^footy]: this is a footnote that #> should be preserved #>  if (requireNamespace(\"withr\")) { lnks <- withr::with_namespace(\"tinkr\",    resolve_anchor_links(md$body, readLines(md$path))) md$body <- lnks md$show() } #> --- #> title: this tests links #> --- #>  #> ## These are some links that are valid in basic markdown #>  #> This is some text [that contains links][this fun link1] which #> [can be `inline`](https://example.com/2) or [can be spread across multiple lines #> because the link text is JUST TOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO #> LONG, y'all][link3]. #>  #> Mainly, we want to see if [link text #> by reference][link4] and if links [can be referenced multiple times][this fun link1] #>  #> This should also [include non-reference links](https://example.com/5) #>  #> If you [write]{.confession} \\[some link text\\]\\[link2\\], that will appear as [some link text][link2] #> but you can also [test][racehorse] [sub][sub-link1] [links][sub_link2] #>  #> [pizza \\& icecream][pizzaicecream] = fun #>  #> ```markdown #> you can write links like [a link](https://example.com/racehorse) or using #> [reference style][racehorce] #>  #> [racehorse]: https://example.com/racehorse/    #> ``` #>  #> ## This is some extended markdown content {#extended .callout} #>  #> This should also include references that use [standalone] links and #> footnotes should not be properly parsed and will be considered 'asis' nodes, #> at least that's what I *believe*[^footy]. Maybe this might not pan out [^but who #> knows? footnotes are **WEIRD**, man]. #>  #> <!-- links go here! --> #>  #> [^footy]: this is a footnote that #> should be preserved #>  #> [this fun link1]: https://example.com/1 #> [link3]: https://example.com/3 #> [link4]: https://example.com/4 #> [link2]: https://example.com/2 \"link with title!\" #> [racehorse]: https://example.com/racehorse/ #> [sub-link1]: https://example.com/racehorse/1/1 \"One One Won One\" #> [sub_link2]: https://example.com/racehorse/2/2/ \"Two Two Won One Two\" #> [pizzaicecream]: https://example.com/pizza&icecream #> [standalone]: https://example.com/standalone #>  #>"},{"path":"https://docs.ropensci.org/tinkr/reference/stylesheet.html","id":null,"dir":"Reference","previous_headings":"","what":"The tinkr stylesheet — stylesheet","title":"The tinkr stylesheet — stylesheet","text":"function returns path tinkr stylesheet","code":""},{"path":"https://docs.ropensci.org/tinkr/reference/stylesheet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The tinkr stylesheet — stylesheet","text":"","code":"stylesheet()"},{"path":"https://docs.ropensci.org/tinkr/reference/stylesheet.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The tinkr stylesheet — stylesheet","text":"single element character vector representing path stylesheet used tinkr.","code":""},{"path":"https://docs.ropensci.org/tinkr/reference/stylesheet.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The tinkr stylesheet — stylesheet","text":"","code":"tinkr::stylesheet() #> [1] \"/usr/local/lib/R/site-library/tinkr/stylesheets/xml2md_gfm.xsl\""},{"path":"https://docs.ropensci.org/tinkr/reference/tinkr-package.html","id":null,"dir":"Reference","previous_headings":"","what":"tinkr: Cast '(R)Markdown' Files to 'XML' and Back Again — tinkr-package","title":"tinkr: Cast '(R)Markdown' Files to 'XML' and Back Again — tinkr-package","text":"Parsing '(R)Markdown' files numerous regular expressions can fraught peril, way. Converting '(R)Markdown' files 'XML' using 'commonmark' package allows -memory editing via 'markdown' elements via 'XPath' extensible 'R6' class called 'yarn'. modified 'XML' representations can written '(R)Markdown' documents via 'xslt' stylesheet implements extended version 'GitHub'-flavoured 'markdown' can tinker hearts content.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/tinkr/reference/tinkr-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"tinkr: Cast '(R)Markdown' Files to 'XML' and Back Again — tinkr-package","text":"Maintainer: Zhian N. Kamvar zkamvar@gmail.com (ORCID) Authors: Maëlle Salmon msmaellesalmon@gmail.com (ORCID) Jeroen Ooms contributors: Nick Wellnhofer (Nick Wellnhofer wrote XSLT stylesheet.) [copyright holder] rOpenSci (https://ropensci.org/) [funder] Peter Daengeli [contributor]","code":""},{"path":"https://docs.ropensci.org/tinkr/reference/to_md.html","id":null,"dir":"Reference","previous_headings":"","what":"Write YAML and XML back to disk as (R)Markdown — to_md","title":"Write YAML and XML back to disk as (R)Markdown — to_md","text":"Write YAML XML back disk (R)Markdown","code":""},{"path":"https://docs.ropensci.org/tinkr/reference/to_md.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write YAML and XML back to disk as (R)Markdown — to_md","text":"","code":"to_md(yaml_xml_list, path = NULL, stylesheet_path = stylesheet())"},{"path":"https://docs.ropensci.org/tinkr/reference/to_md.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write YAML and XML back to disk as (R)Markdown — to_md","text":"yaml_xml_list result call to_xml() editing. path path new file. Defaults NULL, write file, still produce conversion pass output character vector. stylesheet_path path XSL stylesheet","code":""},{"path":"https://docs.ropensci.org/tinkr/reference/to_md.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Write YAML and XML back to disk as (R)Markdown — to_md","text":"converted document, invisibly.","code":""},{"path":"https://docs.ropensci.org/tinkr/reference/to_md.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Write YAML and XML back to disk as (R)Markdown — to_md","text":"stylesheet use decide whether lists built using \"*\" \"-\" instance. keen keep Markdown style using to_md() to_xml(), can tweak XSL stylesheet bit provide path XSL stylesheet argument.","code":""},{"path":"https://docs.ropensci.org/tinkr/reference/to_md.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Write YAML and XML back to disk as (R)Markdown — to_md","text":"","code":"path <- system.file(\"extdata\", \"example1.md\", package = \"tinkr\") yaml_xml_list <- to_xml(path) names(yaml_xml_list) #> [1] \"yaml\" \"body\" library(\"magrittr\") # transform level 3 headers into level 1 headers body <- yaml_xml_list$body body %>%   xml2::xml_find_all(xpath = './/d1:heading',                      xml2::xml_ns(.)) %>%   .[xml2::xml_attr(., \"level\") == \"3\"] -> headers3 xml2::xml_set_attr(headers3, \"level\", 1) yaml_xml_list$body <- body # save back and have a look newmd <- tempfile(\"newmd\", fileext = \".md\") to_md(yaml_xml_list, newmd) # file.edit(\"newmd.md\") file.remove(newmd) #> [1] TRUE"},{"path":"https://docs.ropensci.org/tinkr/reference/to_xml.html","id":null,"dir":"Reference","previous_headings":"","what":"Transform file to XML — to_xml","title":"Transform file to XML — to_xml","text":"Transform file XML","code":""},{"path":"https://docs.ropensci.org/tinkr/reference/to_xml.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transform file to XML — to_xml","text":"","code":"to_xml(   path,   encoding = \"UTF-8\",   sourcepos = FALSE,   anchor_links = TRUE,   unescaped = TRUE )"},{"path":"https://docs.ropensci.org/tinkr/reference/to_xml.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transform file to XML — to_xml","text":"path Path file. encoding Encoding used readLines. sourcepos passed commonmark::markdown_xml(). TRUE, source position file included \"sourcepos\" attribute. Defaults FALSE. anchor_links TRUE (default), reference-style links anchors (style [key]: https://example.com/link \"title\") preserved best possible. FALSE, anchors disappear links appear normal links. See resolve_anchor_links() details. unescaped TRUE (default) sourcepos = TRUE, square braces unescaped original document preserved best possible. FALSE, braces escaped output document. See protect_unescaped() details.","code":""},{"path":"https://docs.ropensci.org/tinkr/reference/to_xml.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Transform file to XML — to_xml","text":"list containing YAML file (yaml) body (body) XML.","code":""},{"path":"https://docs.ropensci.org/tinkr/reference/to_xml.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Transform file to XML — to_xml","text":"function take (R)markdown file, split yaml header body, read body commonmark::markdown_xml(). RMarkdown code fences parsed expose chunk options XML tickboxes (aka checkboxes) GitHub-flavored markdown preserved (modifications commonmark standard).","code":""},{"path":"https://docs.ropensci.org/tinkr/reference/to_xml.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Transform file to XML — to_xml","text":"Math elements protected default. can use protect_math() address needed.","code":""},{"path":"https://docs.ropensci.org/tinkr/reference/to_xml.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Transform file to XML — to_xml","text":"","code":"path <- system.file(\"extdata\", \"example1.md\", package = \"tinkr\") post_list <- to_xml(path) names(post_list) #> [1] \"yaml\" \"body\" path2 <- system.file(\"extdata\", \"example2.Rmd\", package = \"tinkr\") post_list2 <- to_xml(path2) post_list2 #> $yaml #> [1] \"---\"                         \"title: \\\"Untitled\\\"\"         #> [3] \"author: \\\"M. Salmon\\\"\"       \"date: \\\"September 6, 2018\\\"\" #> [5] \"output: html_document\"       \"---\"                         #>  #> $body #> {xml_document} #> <document xmlns=\"http://commonmark.org/xml/1.0\"> #>  [1] <code_block xml:space=\"preserve\" language=\"r\" name=\"setup\" include=\"FALS ... #>  [2] <heading level=\"2\">\\n  <text xml:space=\"preserve\">R Markdown<\/text>\\n<\/h ... #>  [3] <paragraph>\\n  <text xml:space=\"preserve\">This is an <\/text>\\n  <striket ... #>  [4] <paragraph>\\n  <text xml:space=\"preserve\">When you click the <\/text>\\n   ... #>  [5] <code_block xml:space=\"preserve\" language=\"r\" name=\"\" eval=\"TRUE\" echo=\" ... #>  [6] <heading level=\"2\">\\n  <text xml:space=\"preserve\">Including Plots<\/text> ... #>  [7] <paragraph>\\n  <text xml:space=\"preserve\">You can also embed plots, for  ... #>  [8] <code_block xml:space=\"preserve\" language=\"python\" name=\"\" fig.cap=\"&quo ... #>  [9] <code_block xml:space=\"preserve\" language=\"python\" name=\"\">plot(pressure ... #> [10] <paragraph>\\n  <text xml:space=\"preserve\">Non-RMarkdown blocks are also  ... #> [11] <code_block info=\"bash\" xml:space=\"preserve\" name=\"\">echo \"this is an un ... #> [12] <code_block xml:space=\"preserve\" name=\"\">This is an ambiguous code block ... #> [13] <paragraph>\\n  <text xml:space=\"preserve\">Note that the <\/text>\\n  <code ... #> [14] <table>\\n  <table_header>\\n    <table_cell align=\"left\">\\n      <text xm ... #> [15] <paragraph>\\n  <text xml:space=\"preserve\">blabla<\/text>\\n<\/paragraph> #>"},{"path":"https://docs.ropensci.org/tinkr/reference/yarn.html","id":null,"dir":"Reference","previous_headings":"","what":"R6 class containing XML representation of Markdown — yarn","title":"R6 class containing XML representation of Markdown — yarn","text":"Wrapper around XML representation Markdown document. contains four publicly accessible slots: path, yaml, body, ns.","code":""},{"path":"https://docs.ropensci.org/tinkr/reference/yarn.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"R6 class containing XML representation of Markdown — yarn","text":"class fancy wrapper around results to_xml() methods make easier add, analyze, remove, write elements markdown document.","code":""},{"path":"https://docs.ropensci.org/tinkr/reference/yarn.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"R6 class containing XML representation of Markdown — yarn","text":"requires sourcepos attribute recorded object initialised. See protect_unescaped() details.","code":""},{"path":"https://docs.ropensci.org/tinkr/reference/yarn.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"R6 class containing XML representation of Markdown — yarn","text":"path [character] path file disk yaml [character] text block head file body [xml_document] xml document (R)Markdown file. ns [xml_document] xml namespace object defining \"md\" commonmark.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/tinkr/reference/yarn.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"R6 class containing XML representation of Markdown — yarn","text":"yarn$new() yarn$reset() yarn$write() yarn$show() yarn$head() yarn$tail() yarn$add_md() yarn$protect_math() yarn$protect_curly() yarn$protect_unescaped() yarn$clone()","code":""},{"path":"https://docs.ropensci.org/tinkr/reference/yarn.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"R6 class containing XML representation of Markdown — yarn","text":"Create new yarn document","code":""},{"path":"https://docs.ropensci.org/tinkr/reference/yarn.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 class containing XML representation of Markdown — yarn","text":"","code":"yarn$new(path = NULL, encoding = \"UTF-8\", sourcepos = FALSE, ...)"},{"path":"https://docs.ropensci.org/tinkr/reference/yarn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 class containing XML representation of Markdown — yarn","text":"path [character] path markdown episode file disk encoding [character] encoding passed readLines() sourcepos passed commonmark::markdown_xml(). TRUE, source position file included \"sourcepos\" attribute. Defaults FALSE. ... arguments passed to_xml().","code":""},{"path":"https://docs.ropensci.org/tinkr/reference/yarn.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 class containing XML representation of Markdown — yarn","text":"new yarn object containing XML representation (R)Markdown file.","code":""},{"path":"https://docs.ropensci.org/tinkr/reference/yarn.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"R6 class containing XML representation of Markdown — yarn","text":"","code":"path <- system.file(\"extdata\", \"example1.md\", package = \"tinkr\") ex1 <- tinkr::yarn$new(path) ex1 path2 <- system.file(\"extdata\", \"example2.Rmd\", package = \"tinkr\") ex2 <- tinkr::yarn$new(path2) ex2"},{"path":"https://docs.ropensci.org/tinkr/reference/yarn.html","id":"method-reset-","dir":"Reference","previous_headings":"","what":"Method reset()","title":"R6 class containing XML representation of Markdown — yarn","text":"reset yarn document original file","code":""},{"path":"https://docs.ropensci.org/tinkr/reference/yarn.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 class containing XML representation of Markdown — yarn","text":"","code":"yarn$reset()"},{"path":"https://docs.ropensci.org/tinkr/reference/yarn.html","id":"examples-1","dir":"Reference","previous_headings":"","what":"Examples","title":"R6 class containing XML representation of Markdown — yarn","text":"","code":"path <- system.file(\"extdata\", \"example1.md\", package = \"tinkr\") ex1 <- tinkr::yarn$new(path) # OH NO ex1$body ex1$body <- xml2::xml_missing() ex1$reset() ex1$body"},{"path":"https://docs.ropensci.org/tinkr/reference/yarn.html","id":"method-write-","dir":"Reference","previous_headings":"","what":"Method write()","title":"R6 class containing XML representation of Markdown — yarn","text":"Write yarn document Markdown/R Markdown","code":""},{"path":"https://docs.ropensci.org/tinkr/reference/yarn.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 class containing XML representation of Markdown — yarn","text":"","code":"yarn$write(path = NULL, stylesheet_path = stylesheet())"},{"path":"https://docs.ropensci.org/tinkr/reference/yarn.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 class containing XML representation of Markdown — yarn","text":"path path file want write stylesheet_path path xsl stylesheet convert XML markdown.","code":""},{"path":"https://docs.ropensci.org/tinkr/reference/yarn.html","id":"examples-2","dir":"Reference","previous_headings":"","what":"Examples","title":"R6 class containing XML representation of Markdown — yarn","text":"","code":"path <- system.file(\"extdata\", \"example1.md\", package = \"tinkr\") ex1 <- tinkr::yarn$new(path) ex1 tmp <- tempfile() try(readLines(tmp)) # nothing in the file ex1$write(tmp) head(readLines(tmp)) # now a markdown file unlink(tmp)"},{"path":"https://docs.ropensci.org/tinkr/reference/yarn.html","id":"method-show-","dir":"Reference","previous_headings":"","what":"Method show()","title":"R6 class containing XML representation of Markdown — yarn","text":"show markdown contents screen","code":""},{"path":"https://docs.ropensci.org/tinkr/reference/yarn.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 class containing XML representation of Markdown — yarn","text":"","code":"yarn$show(stylesheet_path = stylesheet())"},{"path":"https://docs.ropensci.org/tinkr/reference/yarn.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 class containing XML representation of Markdown — yarn","text":"stylesheet_path path xsl stylesheet convert XML markdown.","code":""},{"path":"https://docs.ropensci.org/tinkr/reference/yarn.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 class containing XML representation of Markdown — yarn","text":"character vector one line line output","code":""},{"path":"https://docs.ropensci.org/tinkr/reference/yarn.html","id":"examples-3","dir":"Reference","previous_headings":"","what":"Examples","title":"R6 class containing XML representation of Markdown — yarn","text":"","code":"path <- system.file(\"extdata\", \"example2.Rmd\", package = \"tinkr\") ex2 <- tinkr::yarn$new(path) ex2$head(5) ex2$tail(5) ex2$show()"},{"path":"https://docs.ropensci.org/tinkr/reference/yarn.html","id":"method-head-","dir":"Reference","previous_headings":"","what":"Method head()","title":"R6 class containing XML representation of Markdown — yarn","text":"show head markdown contents screen","code":""},{"path":"https://docs.ropensci.org/tinkr/reference/yarn.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 class containing XML representation of Markdown — yarn","text":"","code":"yarn$head(n = 6L, stylesheet_path = stylesheet())"},{"path":"https://docs.ropensci.org/tinkr/reference/yarn.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 class containing XML representation of Markdown — yarn","text":"n number elements show top. Negative numbers stylesheet_path path xsl stylesheet convert XML markdown. exclude lines bottom","code":""},{"path":"https://docs.ropensci.org/tinkr/reference/yarn.html","id":"returns-2","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 class containing XML representation of Markdown — yarn","text":"character vector n elements","code":""},{"path":"https://docs.ropensci.org/tinkr/reference/yarn.html","id":"method-tail-","dir":"Reference","previous_headings":"","what":"Method tail()","title":"R6 class containing XML representation of Markdown — yarn","text":"show tail markdown contents screen","code":""},{"path":"https://docs.ropensci.org/tinkr/reference/yarn.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 class containing XML representation of Markdown — yarn","text":"","code":"yarn$tail(n = 6L, stylesheet_path = stylesheet())"},{"path":"https://docs.ropensci.org/tinkr/reference/yarn.html","id":"arguments-4","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 class containing XML representation of Markdown — yarn","text":"n number elements show bottom. Negative numbers stylesheet_path path xsl stylesheet convert XML markdown. exclude lines top","code":""},{"path":"https://docs.ropensci.org/tinkr/reference/yarn.html","id":"returns-3","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 class containing XML representation of Markdown — yarn","text":"character vector n elements","code":""},{"path":"https://docs.ropensci.org/tinkr/reference/yarn.html","id":"method-add-md-","dir":"Reference","previous_headings":"","what":"Method add_md()","title":"R6 class containing XML representation of Markdown — yarn","text":"add arbitrary Markdown element document","code":""},{"path":"https://docs.ropensci.org/tinkr/reference/yarn.html","id":"usage-6","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 class containing XML representation of Markdown — yarn","text":"","code":"yarn$add_md(md, where = 0L)"},{"path":"https://docs.ropensci.org/tinkr/reference/yarn.html","id":"arguments-5","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 class containing XML representation of Markdown — yarn","text":"md string markdown formatted text. location document add markdown text. passed xml2::xml_add_child(). Defaults 0, indicates top document.","code":""},{"path":"https://docs.ropensci.org/tinkr/reference/yarn.html","id":"examples-4","dir":"Reference","previous_headings":"","what":"Examples","title":"R6 class containing XML representation of Markdown — yarn","text":"","code":"path <- system.file(\"extdata\", \"example2.Rmd\", package = \"tinkr\") ex <- tinkr::yarn$new(path) # two headings, no lists xml2::xml_find_all(ex$body, \"md:heading\", ex$ns) xml2::xml_find_all(ex$body, \"md:list\", ex$ns) ex$add_md(   \"# Hello\\n\\nThis is *new* formatted text from `{tinkr}`!\",   where = 1L )$add_md(   \" - This\\n - is\\n - a new list\",   where = 2L ) # three headings xml2::xml_find_all(ex$body, \"md:heading\", ex$ns) xml2::xml_find_all(ex$body, \"md:list\", ex$ns) tmp <- tempfile() ex$write(tmp) readLines(tmp, n = 20)"},{"path":"https://docs.ropensci.org/tinkr/reference/yarn.html","id":"method-protect-math-","dir":"Reference","previous_headings":"","what":"Method protect_math()","title":"R6 class containing XML representation of Markdown — yarn","text":"Protect math blocks escaped","code":""},{"path":"https://docs.ropensci.org/tinkr/reference/yarn.html","id":"usage-7","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 class containing XML representation of Markdown — yarn","text":"","code":"yarn$protect_math()"},{"path":"https://docs.ropensci.org/tinkr/reference/yarn.html","id":"examples-5","dir":"Reference","previous_headings":"","what":"Examples","title":"R6 class containing XML representation of Markdown — yarn","text":"","code":"path <- system.file(\"extdata\", \"math-example.md\", package = \"tinkr\") ex <- tinkr::yarn$new(path) ex$tail() # math blocks are escaped :( ex$protect_math()$tail() # math blocks are no longer escaped :)"},{"path":"https://docs.ropensci.org/tinkr/reference/yarn.html","id":"method-protect-curly-","dir":"Reference","previous_headings":"","what":"Method protect_curly()","title":"R6 class containing XML representation of Markdown — yarn","text":"Protect curly phrases {likethat} escaped","code":""},{"path":"https://docs.ropensci.org/tinkr/reference/yarn.html","id":"usage-8","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 class containing XML representation of Markdown — yarn","text":"","code":"yarn$protect_curly()"},{"path":"https://docs.ropensci.org/tinkr/reference/yarn.html","id":"examples-6","dir":"Reference","previous_headings":"","what":"Examples","title":"R6 class containing XML representation of Markdown — yarn","text":"","code":"path <- system.file(\"extdata\", \"basic-curly.md\", package = \"tinkr\") ex <- tinkr::yarn$new(path) ex$protect_curly()$head()"},{"path":"https://docs.ropensci.org/tinkr/reference/yarn.html","id":"method-protect-unescaped-","dir":"Reference","previous_headings":"","what":"Method protect_unescaped()","title":"R6 class containing XML representation of Markdown — yarn","text":"Protect unescaped square braces escaped. applied default use yarn$new(sourcepos = TRUE).","code":""},{"path":"https://docs.ropensci.org/tinkr/reference/yarn.html","id":"usage-9","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 class containing XML representation of Markdown — yarn","text":"","code":"yarn$protect_unescaped()"},{"path":"https://docs.ropensci.org/tinkr/reference/yarn.html","id":"examples-7","dir":"Reference","previous_headings":"","what":"Examples","title":"R6 class containing XML representation of Markdown — yarn","text":"","code":"path <- system.file(\"extdata\", \"basic-curly.md\", package = \"tinkr\") ex <- tinkr::yarn$new(path, sourcepos = TRUE, unescaped = FALSE) ex$tail() ex$protect_unescaped()$tail()"},{"path":"https://docs.ropensci.org/tinkr/reference/yarn.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"R6 class containing XML representation of Markdown — yarn","text":"objects class cloneable method.","code":""},{"path":"https://docs.ropensci.org/tinkr/reference/yarn.html","id":"usage-10","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 class containing XML representation of Markdown — yarn","text":"","code":"yarn$clone(deep = FALSE)"},{"path":"https://docs.ropensci.org/tinkr/reference/yarn.html","id":"arguments-6","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 class containing XML representation of Markdown — yarn","text":"deep Whether make deep clone.","code":""},{"path":"https://docs.ropensci.org/tinkr/reference/yarn.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"R6 class containing XML representation of Markdown — yarn","text":"","code":"## ------------------------------------------------ ## Method `yarn$new` ## ------------------------------------------------  path <- system.file(\"extdata\", \"example1.md\", package = \"tinkr\") ex1 <- tinkr::yarn$new(path) ex1 #> <yarn> #>   Public: #>     add_md: function (md, where = 0L)  #>     body: xml_document, xml_node #>     clone: function (deep = FALSE)  #>     head: function (n = 6L, stylesheet_path = stylesheet())  #>     initialize: function (path = NULL, encoding = \"UTF-8\", sourcepos = FALSE,  #>     ns: http://commonmark.org/xml/1.0 #>     path: /usr/local/lib/R/site-library/tinkr/extdata/example1.md #>     protect_curly: function ()  #>     protect_math: function ()  #>     protect_unescaped: function ()  #>     reset: function ()  #>     show: function (stylesheet_path = stylesheet())  #>     tail: function (n = 6L, stylesheet_path = stylesheet())  #>     write: function (path = NULL, stylesheet_path = stylesheet())  #>     yaml: --- title: \"What have these birds been studied for? Quer ... #>   Private: #>     encoding: UTF-8 #>     md_lines: function (path = NULL, stylesheet = NULL)  #>     sourcepos: FALSE path2 <- system.file(\"extdata\", \"example2.Rmd\", package = \"tinkr\") ex2 <- tinkr::yarn$new(path2) ex2 #> <yarn> #>   Public: #>     add_md: function (md, where = 0L)  #>     body: xml_document, xml_node #>     clone: function (deep = FALSE)  #>     head: function (n = 6L, stylesheet_path = stylesheet())  #>     initialize: function (path = NULL, encoding = \"UTF-8\", sourcepos = FALSE,  #>     ns: http://commonmark.org/xml/1.0 #>     path: /usr/local/lib/R/site-library/tinkr/extdata/example2.Rmd #>     protect_curly: function ()  #>     protect_math: function ()  #>     protect_unescaped: function ()  #>     reset: function ()  #>     show: function (stylesheet_path = stylesheet())  #>     tail: function (n = 6L, stylesheet_path = stylesheet())  #>     write: function (path = NULL, stylesheet_path = stylesheet())  #>     yaml: --- title: \"Untitled\" author: \"M. Salmon\" date: \"Septemb ... #>   Private: #>     encoding: UTF-8 #>     md_lines: function (path = NULL, stylesheet = NULL)  #>     sourcepos: FALSE  ## ------------------------------------------------ ## Method `yarn$reset` ## ------------------------------------------------   path <- system.file(\"extdata\", \"example1.md\", package = \"tinkr\") ex1 <- tinkr::yarn$new(path) # OH NO ex1$body #> {xml_document} #> <document xmlns=\"http://commonmark.org/xml/1.0\"> #>  [1] <paragraph>\\n  <text xml:space=\"preserve\">In the <\/text>\\n  <link destin ... #>  [2] <heading level=\"3\">\\n  <text xml:space=\"preserve\">Getting a list of 50 s ... #>  [3] <paragraph>\\n  <text xml:space=\"preserve\">For more details about the fol ... #>  [4] <code_block info=\"r\" xml:space=\"preserve\" name=\"\"># polygon for filterin ... #>  [5] <paragraph>\\n  <text xml:space=\"preserve\">For the sake of simplicity, we ... #>  [6] <code_block info=\"r\" xml:space=\"preserve\" name=\"\">species &lt;- ebd %&gt ... #>  [7] <paragraph>\\n  <text xml:space=\"preserve\">The species are Carrion Crow,  ... #>  [8] <heading level=\"3\">\\n  <text xml:space=\"preserve\">Querying the scientifi ... #>  [9] <paragraph>\\n  <text xml:space=\"preserve\">Just like rOpenSci has a taxon ... #> [10] <paragraph>\\n  <text xml:space=\"preserve\">We shall use <\/text>\\n  <code  ... #> [11] <paragraph>\\n  <text xml:space=\"preserve\">We first define a function ret ... #> [12] <paragraph>\\n  <text xml:space=\"preserve\">We use <\/text>\\n  <code xml:sp ... #> [13] <code_block info=\"r\" xml:space=\"preserve\" name=\"\">.get_papers &lt;- func ... #> [14] <code_block xml:space=\"preserve\" name=\"\">##  [1] \"Great spotted cuckoo n ... #> [15] <paragraph>\\n  <text xml:space=\"preserve\">If we were working on a scient ... #> [16] <paragraph>\\n  <text xml:space=\"preserve\">We then apply this function to ... #> [17] <code_block info=\"r\" xml:space=\"preserve\" name=\"\">get_papers &lt;- ratel ... #> [18] <code_block xml:space=\"preserve\" name=\"\">## [1] 522\\n<\/code_block> #> [19] <code_block info=\"r\" xml:space=\"preserve\" name=\"\">all_papers &lt;- uniqu ... #> [20] <code_block xml:space=\"preserve\" name=\"\">## [1] 378\\n<\/code_block> #> ... ex1$body <- xml2::xml_missing() ex1$reset() ex1$body #> {xml_document} #> <document xmlns=\"http://commonmark.org/xml/1.0\"> #>  [1] <paragraph>\\n  <text xml:space=\"preserve\">In the <\/text>\\n  <link destin ... #>  [2] <heading level=\"3\">\\n  <text xml:space=\"preserve\">Getting a list of 50 s ... #>  [3] <paragraph>\\n  <text xml:space=\"preserve\">For more details about the fol ... #>  [4] <code_block info=\"r\" xml:space=\"preserve\" name=\"\"># polygon for filterin ... #>  [5] <paragraph>\\n  <text xml:space=\"preserve\">For the sake of simplicity, we ... #>  [6] <code_block info=\"r\" xml:space=\"preserve\" name=\"\">species &lt;- ebd %&gt ... #>  [7] <paragraph>\\n  <text xml:space=\"preserve\">The species are Carrion Crow,  ... #>  [8] <heading level=\"3\">\\n  <text xml:space=\"preserve\">Querying the scientifi ... #>  [9] <paragraph>\\n  <text xml:space=\"preserve\">Just like rOpenSci has a taxon ... #> [10] <paragraph>\\n  <text xml:space=\"preserve\">We shall use <\/text>\\n  <code  ... #> [11] <paragraph>\\n  <text xml:space=\"preserve\">We first define a function ret ... #> [12] <paragraph>\\n  <text xml:space=\"preserve\">We use <\/text>\\n  <code xml:sp ... #> [13] <code_block info=\"r\" xml:space=\"preserve\" name=\"\">.get_papers &lt;- func ... #> [14] <code_block xml:space=\"preserve\" name=\"\">##  [1] \"Great spotted cuckoo n ... #> [15] <paragraph>\\n  <text xml:space=\"preserve\">If we were working on a scient ... #> [16] <paragraph>\\n  <text xml:space=\"preserve\">We then apply this function to ... #> [17] <code_block info=\"r\" xml:space=\"preserve\" name=\"\">get_papers &lt;- ratel ... #> [18] <code_block xml:space=\"preserve\" name=\"\">## [1] 522\\n<\/code_block> #> [19] <code_block info=\"r\" xml:space=\"preserve\" name=\"\">all_papers &lt;- uniqu ... #> [20] <code_block xml:space=\"preserve\" name=\"\">## [1] 378\\n<\/code_block> #> ...  ## ------------------------------------------------ ## Method `yarn$write` ## ------------------------------------------------  path <- system.file(\"extdata\", \"example1.md\", package = \"tinkr\") ex1 <- tinkr::yarn$new(path) ex1 #> <yarn> #>   Public: #>     add_md: function (md, where = 0L)  #>     body: xml_document, xml_node #>     clone: function (deep = FALSE)  #>     head: function (n = 6L, stylesheet_path = stylesheet())  #>     initialize: function (path = NULL, encoding = \"UTF-8\", sourcepos = FALSE,  #>     ns: http://commonmark.org/xml/1.0 #>     path: /usr/local/lib/R/site-library/tinkr/extdata/example1.md #>     protect_curly: function ()  #>     protect_math: function ()  #>     protect_unescaped: function ()  #>     reset: function ()  #>     show: function (stylesheet_path = stylesheet())  #>     tail: function (n = 6L, stylesheet_path = stylesheet())  #>     write: function (path = NULL, stylesheet_path = stylesheet())  #>     yaml: --- title: \"What have these birds been studied for? Quer ... #>   Private: #>     encoding: UTF-8 #>     md_lines: function (path = NULL, stylesheet = NULL)  #>     sourcepos: FALSE tmp <- tempfile() try(readLines(tmp)) # nothing in the file #> Warning: cannot open file '/tmp/Rtmp0HDLkH/file43053740c20': No such file or directory #> Error in file(con, \"r\") : cannot open the connection ex1$write(tmp) head(readLines(tmp)) # now a markdown file #> [1] \"---\"                                                                                #> [2] \"title: \\\"What have these birds been studied for? Querying science outputs with R\\\"\" #> [3] \"slug: birds-science\"                                                                #> [4] \"authors:\"                                                                           #> [5] \"  - name: Maëlle Salmon\"                                                            #> [6] \"    url: https://masalmon.eu/\"                                                      unlink(tmp)  ## ------------------------------------------------ ## Method `yarn$show` ## ------------------------------------------------  path <- system.file(\"extdata\", \"example2.Rmd\", package = \"tinkr\") ex2 <- tinkr::yarn$new(path) ex2$head(5) #> --- #> title: \"Untitled\" #> author: \"M. Salmon\" #> date: \"September 6, 2018\" #> output: html_document ex2$tail(5) #> | Cyanistes caeruleus        | Eurasian Blue Tit   | 233 |  #> | Chroicocephalus ridibundus | Black-headed Gull   | 223 |  #>  #> blabla #>  ex2$show() #> --- #> title: \"Untitled\" #> author: \"M. Salmon\" #> date: \"September 6, 2018\" #> output: html_document #> --- #>  #> ```{r setup, include=FALSE, eval=TRUE} #> knitr::opts_chunk$set(echo = TRUE) #> ``` #>  #> ## R Markdown #>  #> This is an ~~R Markdown document~~. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see [http://rmarkdown.rstudio.com](http://rmarkdown.rstudio.com). #>  #> When you click the **Knit** button a document will be generated that includes both content as well as the output of any embedded R code chunks within the document. You can embed an R code chunk like this: #>  #> ```{r, eval=TRUE, echo=TRUE} #> summary(cars) #> ``` #>  #> ## Including Plots #>  #> You can also embed plots, for example: #>  #> ```{python, fig.cap=\"pretty plot\", echo=-c(1, 2), eval=TRUE} #> plot(pressure) #> ``` #>  #> ```{python} #> plot(pressure) #> ``` #>  #> Non-RMarkdown blocks are also considered #>  #> ```bash #> echo \"this is an unevaluted bash block\" #> ``` #>  #> ``` #> This is an ambiguous code block #> ``` #>  #> Note that the `echo = FALSE` parameter was added to the code chunk to prevent printing of the R code that generated the plot. #>  #> | scientific\\_name            | common\\_name         | n   |  #> | :------------------------- | :------------------ | --: | #> | Corvus corone              | Carrion Crow        | 288 |  #> | Turdus merula              | Eurasian Blackbird  | 285 |  #> | Anas platyrhynchos         | Mallard             | 273 |  #> | Fulica atra                | Eurasian Coot       | 268 |  #> | Parus major                | Great Tit           | 266 |  #> | Podiceps cristatus         | Great Crested Grebe | 254 |  #> | Ardea cinerea              | Gray Heron          | 236 |  #> | Cygnus olor                | Mute Swan           | 234 |  #> | Cyanistes caeruleus        | Eurasian Blue Tit   | 233 |  #> | Chroicocephalus ridibundus | Black-headed Gull   | 223 |  #>  #> blabla #>   ## ------------------------------------------------ ## Method `yarn$add_md` ## ------------------------------------------------  path <- system.file(\"extdata\", \"example2.Rmd\", package = \"tinkr\") ex <- tinkr::yarn$new(path) # two headings, no lists xml2::xml_find_all(ex$body, \"md:heading\", ex$ns) #> {xml_nodeset (2)} #> [1] <heading level=\"2\">\\n  <text xml:space=\"preserve\">R Markdown<\/text>\\n<\/he ... #> [2] <heading level=\"2\">\\n  <text xml:space=\"preserve\">Including Plots<\/text>\\ ... xml2::xml_find_all(ex$body, \"md:list\", ex$ns) #> {xml_nodeset (0)} ex$add_md(   \"# Hello\\n\\nThis is *new* formatted text from `{tinkr}`!\",   where = 1L )$add_md(   \" - This\\n - is\\n - a new list\",   where = 2L ) # three headings xml2::xml_find_all(ex$body, \"md:heading\", ex$ns) #> {xml_nodeset (3)} #> [1] <heading level=\"1\">\\n  <text xml:space=\"preserve\">Hello<\/text>\\n<\/heading> #> [2] <heading level=\"2\">\\n  <text xml:space=\"preserve\">R Markdown<\/text>\\n<\/he ... #> [3] <heading level=\"2\">\\n  <text xml:space=\"preserve\">Including Plots<\/text>\\ ... xml2::xml_find_all(ex$body, \"md:list\", ex$ns) #> {xml_nodeset (1)} #> [1] <list type=\"bullet\" tight=\"true\">\\n  <item>\\n    <paragraph>\\n      <text ... tmp <- tempfile() ex$write(tmp) readLines(tmp, n = 20) #>  [1] \"---\"                                          #>  [2] \"title: \\\"Untitled\\\"\"                          #>  [3] \"author: \\\"M. Salmon\\\"\"                        #>  [4] \"date: \\\"September 6, 2018\\\"\"                  #>  [5] \"output: html_document\"                        #>  [6] \"---\"                                          #>  [7] \"\"                                             #>  [8] \"```{r setup, include=FALSE, eval=TRUE}\"       #>  [9] \"knitr::opts_chunk$set(echo = TRUE)\"           #> [10] \"```\"                                          #> [11] \"\"                                             #> [12] \"# Hello\"                                      #> [13] \"\"                                             #> [14] \"- This\"                                       #> [15] \"- is\"                                         #> [16] \"- a new list\"                                 #> [17] \"\"                                             #> [18] \"This is *new* formatted text from `{tinkr}`!\" #> [19] \"\"                                             #> [20] \"## R Markdown\"                                 ## ------------------------------------------------ ## Method `yarn$protect_math` ## ------------------------------------------------  path <- system.file(\"extdata\", \"math-example.md\", package = \"tinkr\") ex <- tinkr::yarn$new(path) ex$tail() # math blocks are escaped :( #>  #> $$ #> Q\\_{N(norm)}=\\\\frac{C\\_N +C\\_{N-1}}2\\\\times #> \\\\frac{\\\\sum *{i=N-n}^{N}Q\\_i} {\\\\sum*{j=N-n}^{N}{(\\\\frac{C\\_j+C\\_{j-1}}2)}} #> $$ #>  ex$protect_math()$tail() # math blocks are no longer escaped :) #>  #> $$ #> Q_{N(norm)}=\\frac{C_N +C_{N-1}}2\\times #> \\frac{\\sum _{i=N-n}^{N}Q_i} {\\sum_{j=N-n}^{N}{(\\frac{C_j+C_{j-1}}2)}} #> $$ #>   ## ------------------------------------------------ ## Method `yarn$protect_curly` ## ------------------------------------------------  path <- system.file(\"extdata\", \"basic-curly.md\", package = \"tinkr\") ex <- tinkr::yarn$new(path) ex$protect_curly()$head() #> --- #> title: basic curly #> --- #>  #> # preface {#pre-face .unnumbered} #>   ## ------------------------------------------------ ## Method `yarn$protect_unescaped` ## ------------------------------------------------  path <- system.file(\"extdata\", \"basic-curly.md\", package = \"tinkr\") ex <- tinkr::yarn$new(path, sourcepos = TRUE, unescaped = FALSE) ex$tail() #> ![a pretty puppy](https://placedog.net/200/300){#dog alt=\"a picture #> of a dog\"} #>  #> \\[a span with attributes\\]{.span-with-attributes #> style='color: red;'} #>  ex$protect_unescaped()$tail() #> ![a pretty puppy](https://placedog.net/200/300){#dog alt=\"a picture #> of a dog\"} #>  #> [a span with attributes]{.span-with-attributes #> style='color: red;'} #>"},{"path":"https://docs.ropensci.org/tinkr/news/index.html","id":"tinkr-020","dir":"Changelog","previous_headings":"","what":"tinkr 0.2.0","title":"tinkr 0.2.0","text":"CRAN release: 2023-03-28","code":""},{"path":"https://docs.ropensci.org/tinkr/news/index.html","id":"bug-fix-0-2-0","dir":"Changelog","previous_headings":"","what":"BUG FIX","title":"tinkr 0.2.0","text":"Empty YAML prepend newline {glue} (> 1.6.2). (#93, @jennybc) Relative links whose text anchor key identical (e.g. footnotes) longer doubled output document (issue: #92, fix: #94)","code":""},{"path":"https://docs.ropensci.org/tinkr/news/index.html","id":"new-features-0-2-0","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"tinkr 0.2.0","text":"New protect_curly() function add curly='true' attribute text wrapped curly braces (‘{’, ‘}’) allow parsing XML sending external APIs. function also parse alt text place attribute. New $protect_curly() method implements protect_curly() yarn objects Relative link anchor keys longer characters escaped (#85). unescaped square braces source code can now make roundtrip without extra markup. implemented new default parameter to_xml() called unescaped = TRUE, indicates like unescaped square braces remain unescaped (#78).","code":""},{"path":"https://docs.ropensci.org/tinkr/news/index.html","id":"dependency-update-0-2-0","dir":"Changelog","previous_headings":"","what":"DEPENDENCY UPDATE","title":"tinkr 0.2.0","text":"removed dependency stringr favor base R functions wrapped internal functions stringr-like interface (#88).","code":""},{"path":"https://docs.ropensci.org/tinkr/news/index.html","id":"tinkr-010","dir":"Changelog","previous_headings":"","what":"tinkr 0.1.0","title":"tinkr 0.1.0","text":"CRAN release: 2022-08-19 First version CRAN","code":""},{"path":"https://docs.ropensci.org/tinkr/news/index.html","id":"breaking-change-0-1-0","dir":"Changelog","previous_headings":"","what":"BREAKING CHANGE","title":"tinkr 0.1.0","text":"stylesheets now stylesheets/ path, extdata/. used tinkr::stylesheet() access default stylesheet, need modify code.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/tinkr/news/index.html","id":"bug-fix-0-0-0-9002","dir":"Changelog","previous_headings":"","what":"BUG FIX","title":"tinkr 0.0.0.9002","text":"2022-03-23: added tasklist template compatibility commonmark version 1.8 (#66)","code":""},{"path":"https://docs.ropensci.org/tinkr/news/index.html","id":"tinkr-0009001","dir":"Changelog","previous_headings":"","what":"tinkr 0.0.0.9001","title":"tinkr 0.0.0.9001","text":"xml yaml objects now stored R6 class called yarn. testthat edition 3 now used snapshot testing. Tables now pretty full loop to_xml() + to_md() (@pdaengeli, #9) 2021-05-04: yarn objects remember sourcepos encoding options using $reset() method. 2021-05-06: protect_math() function method protects LaTeX math (dollar notation) escaping commonmark (@zkamvar, #39). 2021-05-06: GitHub-flavored markdown ticks/checkboxes now protected default (@zkamvar, #39). 2021-05-11: md_ns() new convenience function provide md namespace prefix commonmark xml documents (@zkamvar, #39). 2021-05-11: stylesheet() returns path internal {tinkr} stylesheet can easily discovered packages 2021-05-11: yarn methods show(), head(), tail() gain stylesheet_path arguments modified stylesheets can used. 2021-05-24: reference style links (.e. [text][link-ref] [link-ref]:    <link> another place document preserved anchor sink bottom document. 2021-09-14: numeric options fig.width fig.height longer quoted; transform_params() simplified longer requires glue. 2021-10-15: math embedded code punctuation following now allowed (@zkamvar #56) 2021-10-18: links asis nodes beginning paragraphs longer escaped (@zkamvar, #58) 2022-02-07: @zkamvar now maintainer","code":""},{"path":"https://docs.ropensci.org/tinkr/news/index.html","id":"tinkr-0009000","dir":"Changelog","previous_headings":"","what":"tinkr 0.0.0.9000","title":"tinkr 0.0.0.9000","text":"Added NEWS.md file track changes package.","code":""}]
